Makers As screen:
    BackgroundImage: =
    Height: =Max(App.Height, App.DesignHeight)
    OnVisible: =If(ReinitializeHome, Select(fncInitializeHome_1));
    Width: =Max(App.Width, App.DesignWidth)

    lblMakerCreatedBy As label:
        Align: =Center
        Font: =Font.'Segoe UI'
        FontWeight: =Semibold
        Height: =32
        Size: =10
        Text: ="CREATED BY"
        Width: =292
        X: =607
        Y: =144
        ZIndex: =1

    lblMakerCreatedOn As label:
        Align: =Center
        Font: =Font.'Segoe UI'
        FontWeight: =Semibold
        Height: =32
        Size: =10
        Text: ="CREATED ON"
        Width: =235
        X: =444
        Y: =144
        ZIndex: =5

    MakerFooterContainer As groupContainer.horizontalAutoLayoutContainer:
        DisplayMode: =DisplayMode.Edit
        Height: =42
        Width: =1880
        X: =20
        Y: =1036
        ZIndex: =8

        lblCurrentSettings_1 As label:
            Align: =Align.Center
            FillPortions: =1
            Text: |-
                ="Azure Devops Org: " & drpAdoOrganizations_1.Selected.AccountName & " ◾ " & "Project: " & drpAdoProjects_1.Selected.name & " ◾ " & "Repo: " & If(
                    tglOverrideRepo_1.Value,
                    txtRepoOverride_1.Text,
                    drpRepos_1.Selected.name
                ) & " ◾ " & "Maker Environment: " & glrlEnvironments_1.Selected.lblEnvironments_1.Text
            Width: =1000
            ZIndex: =1

    lblMakerAppTitle As label:
        Align: =Center
        Color: =RGBA(255, 255, 255, 1)
        Fill: =PrimaryColor2Value
        Font: =Font.'Segoe UI'
        FontWeight: =Semibold
        Height: =68
        OnSelect: =
        Size: =20
        Text: ="Power Platform ALM Accelerator"
        Width: =1920
        ZIndex: =9

    "glrMakerSolutions As gallery.'BrowseLayout_Vertical_TwoTextVariant_ver4.0'":
        Fill: =RGBA(255,255, 255, 1)
        Height: =854
        Items: =Search(Sort(SelectedEnvironmentSolutions, friendlyname), txtSearch_1.Text, "friendlyname")
        Layout: =Layout.Vertical
        OnSelect: =
        TemplatePadding: =0
        TemplateSize: =80
        Width: =App.Width - 40
        X: =20
        Y: =182
        ZIndex: =12

        Title2_1 As label:
            Color: =RGBA(0, 0, 0, 1)
            FontWeight: =Normal
            Height: =37
            OnSelect: =
            PaddingBottom: =0
            PaddingLeft: =0
            PaddingRight: =0
            PaddingTop: =0
            Size: =15
            Text: =ThisItem.friendlyname
            Tooltip: =ThisItem.friendlyname
            VerticalAlign: =VerticalAlign.Top
            Width: =362
            Wrap: =false
            X: =13
            Y: =17
            ZIndex: =1

        Separator2_1 As rectangle:
            BorderColor: =ColorFade(Separator2_1.Fill, -20%)
            DisabledFill: =Separator2_1.Fill
            Fill: |-
                =ColorValue("#f4f3f2")
            Height: =1
            HoverFill: =ColorFade(Separator2_1.Fill, 20%)
            OnSelect: =Select(Parent)
            PressedFill: =ColorFade(Separator2_1.Fill, -20%)
            Width: =Parent.TemplateWidth
            Y: =Parent.TemplateHeight - 1
            ZIndex: =2

        lblOpenSolution_1 As label:
            Color: =RGBA(0, 134, 208, 1)
            Height: =29
            LineHeight: =1.6
            OnSelect: =
            PaddingLeft: =0
            Size: =12
            Text: ="Open Solution"
            Underline: =true
            Width: =117
            X: =13
            Y: =42
            ZIndex: =4

        Image2_1 As image:
            BorderColor: =ColorFade(Image2_1.Fill, -20%)
            Height: =30
            HoverBorderColor: =ColorFade(Image2_1.BorderColor, 20%)
            HoverFill: =ColorFade(Image2_1.Fill, 20%)
            Image: =ic_fluent_error_circle_24_regular
            OnSelect: =Select(Parent)
            PaddingBottom: =2
            PaddingLeft: =2
            PaddingRight: =2
            PaddingTop: =2
            PressedBorderColor: =ColorFade(Image2_1.BorderColor, -20%)
            PressedFill: =ColorFade(Image2_1.Fill, -20%)
            Tooltip: =
            Visible: |-
                =//CurrentProjects.'Project Status' = 'Project Status'.Failed || CurrentProjects.ErrorType = ErrorType.'Deployment Failed'
                false
            Width: =30
            X: =1472
            Y: =33
            ZIndex: =5

        btnDeploySolution As button:
            BorderColor: =PrimaryColor2Value
            BorderThickness: =1
            Color: =PrimaryColor2Value
            Fill: =White
            FontWeight: =Normal
            Height: =45
            HoverBorderColor: =ColorFade(btnDeploySolution.BorderColor, 20%)
            HoverColor: =ColorFade(btnDeploySolution.Color, 20%)
            HoverFill: =ColorFade(btnDeploySolution.Fill, 20%)
            OnSelect: |-
                =UpdateContext(
                    {
                        showDialogOverlay: true,
                        showCommitDialog: true
                    }
                );
                If(
                    IsBlank(
                        LookUp(
                            LastSavedBranchesCreated,
                            solutionUniqueName = glrMakerSolutions.Selected.uniquename
                        )
                    ),
                    UpdateContext(
                        {
                            locDefaultBranchForCommit: LookUp(
                                SelectedRepoBranches,
                                glrMakerSolutions.Selected.uniquename in DisplayName,
                                DisplayName
                            )
                        }
                    ),
                    UpdateContext(
                        {
                            locDefaultBranchForCommit: LookUp(
                                LastSavedBranchesCreated,
                                solutionUniqueName = glrMakerSolutions.Selected.uniquename,
                                branchName
                            )
                        }
                    )
                );
            PressedBorderColor: =btnDeploySolution.Fill
            PressedColor: =btnDeploySolution.Fill
            PressedFill: =btnDeploySolution.Color
            Size: =11
            Text: ="DEPLOY"
            Width: =200
            X: =893
            Y: =13
            ZIndex: =6

        icoOpenSolution_1 As icon.Add:
            BorderColor: =ColorFade(icoOpenSolution_1.Fill, -20%)
            Color: =RGBA(0, 0, 0, 0)
            DisabledFill: =ColorFade(icoOpenSolution_1.Fill, -80%)
            Height: =38
            HoverBorderColor: =ColorFade(icoOpenSolution_1.BorderColor, 20%)
            HoverColor: =ColorFade(icoOpenSolution_1.Color, 20%)
            HoverFill: =ColorFade(icoOpenSolution_1.Fill, 20%)
            Icon: =Icon.Add
            OnSelect: |-
                =Select(Parent);Launch("https://make.powerapps.com/environments/" & glrlEnvironments_1.Selected.name & "/solutions/" & ThisItem.solutionid, "", "_blank")
            PressedBorderColor: =ColorFade(icoOpenSolution_1.BorderColor, -20%)
            PressedColor: =ColorFade(icoOpenSolution_1.Color, -20%)
            PressedFill: =ColorFade(icoOpenSolution_1.Fill, -20%)
            Width: =106
            X: =10
            Y: =39
            ZIndex: =14

        btnDeleteSolution_1 As button:
            BorderColor: =PrimaryColor2Value
            BorderThickness: =1
            Color: =PrimaryColor2Value
            DisplayMode: |-
                =If(
                    IsBlank(
                        LookUp(
                            SolutionsLatestBuildStatuses,
                            uniquename = ThisItem.uniquename
                        ).deleteSolutionStatus.buildNumber
                    ),
                    DisplayMode.Edit,
                    DisplayMode.Disabled
                )
            Fill: =White
            FontWeight: =Normal
            Height: =45
            HoverBorderColor: =ColorFade(btnDeleteSolution_1.BorderColor, 20%)
            HoverColor: =ColorFade(btnDeleteSolution_1.Color, 20%)
            HoverFill: =ColorFade(btnDeleteSolution_1.Fill, 20%)
            OnSelect: |-
                =UpdateContext({deleteSolutionName: glrMakerSolutions.Selected.friendlyname});
                UpdateContext(
                    {
                        showDialogOverlay: true,
                        showDeleteSolutionDialog: true
                    }
                );
            PressedBorderColor: =btnDeleteSolution_1.Fill
            PressedColor: =btnDeleteSolution_1.Fill
            PressedFill: =btnDeleteSolution_1.Color
            Size: =11
            Text: ="DELETE SOLUTION"
            Visible: =false
            Width: =200
            X: =1418
            Y: =17
            ZIndex: =18

        imgDeleteStatus_1 As image:
            BorderColor: =ColorFade(imgDeleteStatus_1.Fill, -20%)
            DisplayMode: =DisplayMode.View
            Height: =46
            HoverBorderColor: =ColorFade(imgDeleteStatus_1.BorderColor, 20%)
            HoverFill: =ColorFade(imgDeleteStatus_1.Fill, 20%)
            Image: |-
                =//DeleteSolutionStatus has two outputs - status and result which are used inter variably. 
                
                With( { gitStatus: LookUp(
                            SolutionsLatestBuildStatuses,
                            uniquename = ThisItem.uniquename
                        ).deleteSolutionStatus.status,
                        gitResult:LookUp(
                            SolutionsLatestBuildStatuses,
                            uniquename = ThisItem.uniquename
                        ).deleteSolutionStatus.result},
                        If(IsBlank(gitStatus),
                            LookUp(StageStatesIcons, state = "empty").image,
                        If(gitStatus = "completed",
                            LookUp(StageStatesIcons, state =  gitResult).image,
                            LookUp(StageStatesIcons, state =  gitStatus).image)
                        )
                    )
            OnSelect: =Select(Parent);
            PaddingBottom: =10
            PaddingTop: =10
            PressedBorderColor: =ColorFade(imgDeleteStatus_1.BorderColor, -20%)
            PressedFill: =ColorFade(imgDeleteStatus_1.Fill, -20%)
            Tooltip: =
            Visible: =false
            Width: =149
            X: =1450
            Y: =17
            ZIndex: =19

        icoLaunchDeleteBuildUrl_1 As icon.Add:
            BorderColor: =ColorFade(icoLaunchDeleteBuildUrl_1.Fill, -20%)
            Color: =RGBA(0, 0, 0, 1)
            DisabledFill: =ColorFade(icoLaunchDeleteBuildUrl_1.Fill, -80%)
            Fill: =RGBA(0, 0, 0, 0)
            Height: =32
            HoverBorderColor: =ColorFade(icoLaunchDeleteBuildUrl_1.BorderColor, 20%)
            HoverColor: =ColorFade(icoLaunchDeleteBuildUrl_1.Color, 20%)
            HoverFill: =ColorFade(icoLaunchDeleteBuildUrl_1.Fill, 20%)
            Icon: =Icon.Trash
            OnSelect: |
                =Select(Parent);
                Launch(
                    LookUp(
                        SolutionsLatestBuildStatuses,
                        uniquename = ThisItem.uniquename
                    ).deleteSolutionStatus._links.web.href
                );
            PressedBorderColor: =ColorFade(icoLaunchDeleteBuildUrl_1.BorderColor, -20%)
            PressedColor: =ColorFade(icoLaunchDeleteBuildUrl_1.Color, -20%)
            PressedFill: =ColorFade(icoLaunchDeleteBuildUrl_1.Fill, -20%)
            TabIndex: =0
            Tooltip: |-
                =If(
                    Not IsBlank(
                        LookUp(
                            SolutionsLatestBuildStatuses,
                            uniquename = ThisItem.uniquename
                        ).deleteSolutionStatus.buildNumber
                    ),
                    Concatenate(
                        Text(
                            LookUp(
                                SolutionsLatestBuildStatuses,
                                uniquename = ThisItem.uniquename
                            ).deleteSolutionStatus.buildNumber
                        ),
                        " @ ",
                        Text(
                            DateTimeValue(
                                LookUp(
                                    SolutionsLatestBuildStatuses,
                                    uniquename = ThisItem.uniquename
                                ).deleteSolutionStatus.finishTime
                            ),
                            DateTimeFormat.LongDateTime
                        )
                    ),
                    Blank()
                )
            Width: =32
            X: =1502
            Y: =20
            ZIndex: =20

        grpDevTestProdStatus_1 As group:
            Height: =5
            Width: =5
            X: =40
            Y: =40
            ZIndex: =20

            imgPullRequestTargetBranchTriggeredBuild_1 As image:
                BorderColor: =ColorFade(imgPullRequestTargetBranchTriggeredBuild_1.Fill, -20%)
                DisplayMode: =DisplayMode.View
                Height: =45
                HoverBorderColor: =ColorFade(imgPullRequestTargetBranchTriggeredBuild_1.BorderColor, 20%)
                HoverFill: =ColorFade(imgPullRequestTargetBranchTriggeredBuild_1.Fill, 20%)
                Image: |-
                    =If(!IsEmpty(LookUp(SolutionsLatestBuildStatuses, uniquename = ThisItem.uniquename).solutionTargetBranchStatus),
                    With( 
                        { pullRequestStatus : LookUp(SolutionsLatestBuildStatuses, uniquename = ThisItem.uniquename).pullRequestStatus.status ,
                        solutionTargetBranchStatus: First(LookUp(SolutionsLatestBuildStatuses, uniquename = ThisItem.uniquename).solutionTargetBranchStatus)},
                        If(
                            pullRequestStatus <>  "completed",
                            LookUp(StageStatesIcons, state = "empty").image,
                            Switch(
                                First(LookUp(SolutionsLatestBuildStatuses, uniquename = ThisItem.uniquename).solutionTargetBranchStatus).status,
                                "completed", 
                                    LookUp(StageStatesIcons, state = solutionTargetBranchStatus.result).image,
                                "inProgress",
                                    LookUp(StageStatesIcons, state = solutionTargetBranchStatus.status).image,
                                "notStarted",
                                    LookUp(StageStatesIcons, state = solutionTargetBranchStatus.status).image,
                                LookUp(StageStatesIcons, state = "empty").image
                            )
                        )
                    ),
                    LookUp(StageStatesIcons, state = "empty").image)
                OnSelect: =Select(Parent);
                PaddingBottom: =10
                PaddingTop: =10
                PressedBorderColor: =ColorFade(imgPullRequestTargetBranchTriggeredBuild_1.BorderColor, -20%)
                PressedFill: =ColorFade(imgPullRequestTargetBranchTriggeredBuild_1.Fill, -20%)
                Tooltip: |-
                    =//ExportToGitStatus has two outputs - status and result which are used inter variably. 
                    
                    With( { gitStatus: LookUp(
                                SolutionsLatestBuildStatuses,
                                uniquename = ThisItem.uniquename
                            ).exportToGitStatus.status,
                            gitResult:LookUp(
                                SolutionsLatestBuildStatuses,
                                uniquename = ThisItem.uniquename
                            ).exportToGitStatus.result},
                            If(IsBlank(gitStatus),
                                LookUp(StageStatesIcons, state = "empty").image,
                            If(gitStatus = "completed",
                                LookUp(StageStatesIcons, state =  gitResult).image,
                                LookUp(StageStatesIcons, state =  gitStatus).image)
                            )
                        )
                Width: =58
                X: =1242
                Y: =24
                ZIndex: =13

            icoPullRequestTargetBranchTriggeredBuild_1 As icon.Add:
                BorderColor: =ColorFade(icoPullRequestTargetBranchTriggeredBuild_1.Fill, -20%)
                Color: =RGBA(0, 0, 0, 0)
                DisabledFill: =ColorFade(icoPullRequestTargetBranchTriggeredBuild_1.Fill, -80%)
                Fill: =RGBA(0, 0, 0, 0)
                Height: =21
                HoverBorderColor: =ColorFade(icoPullRequestTargetBranchTriggeredBuild_1.BorderColor, 20%)
                HoverColor: =ColorFade(icoPullRequestTargetBranchTriggeredBuild_1.Color, 20%)
                HoverFill: =ColorFade(icoPullRequestTargetBranchTriggeredBuild_1.Fill, 20%)
                Icon: =Icon.Add
                OnSelect: |-
                    =Set(ReturnScreen, Makers);
                    Set(ReinitializeHome, false);
                    Set(SelectedSolutionToView, glrMakerSolutions.Selected);
                    Navigate(DeploymentStatusScreen, ScreenTransition.Fade);
                PressedBorderColor: =ColorFade(icoPullRequestTargetBranchTriggeredBuild_1.BorderColor, -20%)
                PressedColor: =ColorFade(icoPullRequestTargetBranchTriggeredBuild_1.Color, -20%)
                PressedFill: =ColorFade(icoPullRequestTargetBranchTriggeredBuild_1.Fill, -20%)
                Tooltip: |-
                    =//ExportToGitStatus has two outputs - status and result which are used inter variably. 
                    
                    With( { gitStatus: LookUp(
                                SolutionsLatestBuildStatuses,
                                uniquename = ThisItem.uniquename
                            ).exportToGitStatus.status,
                            gitResult:LookUp(
                                SolutionsLatestBuildStatuses,
                                uniquename = ThisItem.uniquename
                            ).exportToGitStatus.result},
                            If(IsBlank(gitStatus),
                                LookUp(StageStatesIcons, state = "empty").image,
                            If(gitStatus = "completed",
                                LookUp(StageStatesIcons, state =  gitResult).image,
                                LookUp(StageStatesIcons, state =  gitStatus).image)
                            )
                        )
                Width: =58
                X: =1242
                Y: =37
                ZIndex: =15

        lblConfigureDeployment_1 As label:
            Color: =RGBA(0, 134, 208, 1)
            Height: =29
            LineHeight: =1.6
            OnSelect: =
            PaddingLeft: =0
            Size: =12
            Text: ="Configure Deployment Settings"
            Underline: =true
            Width: =230
            X: =130
            Y: =42
            ZIndex: =21

        icoConfigureDeployment_1 As icon.Add:
            BorderColor: =ColorFade(icoConfigureDeployment_1.Fill, -20%)
            Color: =RGBA(0, 0, 0, 0)
            DisabledFill: =ColorFade(icoConfigureDeployment_1.Fill, -80%)
            Height: =38
            HoverBorderColor: =ColorFade(icoConfigureDeployment_1.BorderColor, 20%)
            HoverColor: =ColorFade(icoConfigureDeployment_1.Color, 20%)
            HoverFill: =ColorFade(icoConfigureDeployment_1.Fill, 20%)
            Icon: =Icon.Add
            OnSelect: |
                =Set(ReturnScreen, Makers);
                Set(ReinitializeHome, false);
                Set(SelectedSolutionToConfigure, glrMakerSolutions.Selected);
                Navigate(DeploymentSettingsScreen,ScreenTransition.Fade)
            PressedBorderColor: =ColorFade(icoConfigureDeployment_1.BorderColor, -20%)
            PressedColor: =ColorFade(icoConfigureDeployment_1.Color, -20%)
            PressedFill: =ColorFade(icoConfigureDeployment_1.Fill, -20%)
            Width: =220
            X: =130
            Y: =39
            ZIndex: =22

        lblPullRequestStatus_4 As label:
            Align: =Center
            Font: =Font.'Segoe UI'
            FontWeight: =Semibold
            Height: =32
            Size: =10
            Text: =Text(DateTimeValue(ThisItem.createdon), DateTimeFormat.ShortDateTime)
            Width: =235
            X: =421
            Y: =24
            ZIndex: =23

        lblPullRequestStatus_5 As label:
            Align: =Center
            Font: =Font.'Segoe UI'
            FontWeight: =Semibold
            Height: =32
            Size: =10
            Text: =LookUp(Users, systemuserid = GUID(ThisItem._createdby_value)).'Full Name' 
            Width: =235
            X: =618
            Y: =24
            ZIndex: =24

    MakerSearchBox As group:
        Height: =5
        Width: =5
        X: =40
        Y: =40
        ZIndex: =12

        txtSearch_1 As text:
            Clear: =false
            Default: =""
            Height: =46
            HintText: ="Search Solutions"
            HoverBorderColor: =ColorFade(txtSearch_1.BorderColor, 20%)
            HoverColor: =ColorFade(txtSearch_1.Color, 20%)
            HoverFill: =ColorFade(txtSearch_1.Fill, 20%)
            OnSelect: =
            PaddingLeft: =10
            PressedBorderColor: =txtSearch_1.HoverBorderColor
            PressedColor: =txtSearch_1.Color
            PressedFill: =txtSearch_1.Fill
            Width: =364
            X: =1532
            Y: =90
            ZIndex: =13

        icoSearch_1 As icon.Search:
            BorderColor: =ColorFade(icoSearch_1.Fill, -20%)
            Color: =PrimaryColor2Value
            DisabledFill: =ColorFade(icoSearch_1.Fill, -80%)
            Height: =43
            HoverBorderColor: =ColorFade(icoSearch_1.BorderColor, 20%)
            HoverColor: =ColorFade(icoSearch_1.Color, 20%)
            HoverFill: =ColorFade(icoSearch_1.Fill, 20%)
            Icon: =If(Len(txtSearch_1.Text) = 0, Icon.Search, Icon.Cancel)
            OnSelect: =If(icoSearch_1.Icon = Icon.Cancel, Reset(txtSearch_1))
            PaddingBottom: =10
            PaddingLeft: =10
            PaddingRight: =10
            PaddingTop: =10
            PressedBorderColor: =ColorFade(icoSearch_1.BorderColor, -20%)
            PressedColor: =ColorFade(icoSearch_1.Color, -20%)
            PressedFill: =ColorFade(icoSearch_1.Fill, -20%)
            Width: =51
            X: =1845
            Y: =91
            ZIndex: =16

    icoMakerSettings As icon.Settings:
        BorderColor: =ColorFade(icoMakerSettings.Fill, -20%)
        Color: =PrimaryColor2TextValue
        DisabledFill: =ColorFade(icoMakerSettings.Fill, -80%)
        Height: =35
        HoverBorderColor: =ColorFade(icoMakerSettings.BorderColor, 20%)
        HoverColor: =ColorFade(icoMakerSettings.Color, 20%)
        HoverFill: =ColorFade(icoMakerSettings.Fill, 20%)
        Icon: =Icon.Settings
        OnSelect: |-
            =UpdateContext({showDialogOverlay:true,showSettingsDialog:true}); UpdateContext({locStartCheckBuildStatusTimer: false});
        PressedBorderColor: =ColorFade(icoMakerSettings.BorderColor, -20%)
        PressedColor: =ColorFade(icoMakerSettings.Color, -20%)
        PressedFill: =ColorFade(icoMakerSettings.Fill, -20%)
        Visible: =false
        Width: =27
        X: =1869
        Y: =17
        ZIndex: =21

    grpMakerTableHeader As group:
        Height: =5
        Width: =5
        X: =40
        Y: =40
        ZIndex: =21

        lblSolution_1 As label:
            Font: =Font.'Segoe UI'
            FontWeight: =Semibold
            Height: =32
            Size: =10
            Text: ="SOLUTION"
            Width: =258
            X: =28
            Y: =146
            ZIndex: =15

        lblPullRequestStatus_1 As label:
            Align: =Center
            Font: =Font.'Segoe UI'
            FontWeight: =Semibold
            Height: =32
            Size: =10
            Text: ="CURRENT STATUS"
            Width: =292
            X: =1141
            Y: =144
            ZIndex: =19

    MakerPreLoader As Preloader:
        Height: =1012
        IsLoading: =showLoader
        SpinnerColorHex: =LookUp(MakerPreLoader.Styles, Name = "PrimaryColor2Value").Value
        Styles: =ComponentStyles
        Visible: =MakerPreLoader.IsLoading
        Width: =1920
        Y: =68
        ZIndex: =22

    MakerDialogOverlay As rectangle:
        BorderColor: =ColorFade(MakerDialogOverlay.Fill, -20%)
        DisabledFill: =MakerDialogOverlay.Fill
        Fill: =RGBA(0, 0, 0, .5)
        Height: =1080
        HoverFill: =RGBA(0, 0, 0, .5)
        PressedFill: =ColorFade(MakerDialogOverlay.Fill, -20%)
        Visible: =showDialogOverlay
        Width: =1920
        ZIndex: =23

    MakerEnvironmentDialog As groupContainer:
        DisplayMode: =DisplayMode.Edit
        Fill: =PrimaryColor1Value
        Height: =1012
        Visible: =showEnvironmentDialog
        X: =1420
        Y: =68
        ZIndex: =24

        glrlEnvironments_1 As gallery.galleryVertical:
            Default: =DefaultEnvironmentToLoad
            Fill: =PrimaryColor1Value
            Height: =960
            Items: =Environments
            Layout: =Layout.Vertical
            OnSelect: =
            TemplateFill: =If(ThisItem.IsSelected, LightGray, Transparent)
            TemplateSize: =61
            Width: =500
            Y: =50
            ZIndex: =1

            lblEnvironments_1 As label:
                FontWeight: =Normal
                Height: =43
                OnSelect: |
                    =UpdateContext(
                        {
                            showDialogOverlay: false,
                            showEnvironmentDialog: false
                        }
                    );
                    Set(
                        SelectedEnvironment,
                        glrlEnvironments_1.Selected
                    );
                    Patch(
                        'User Settings',
                        DefaultEnvironment,
                        {Value: glrlEnvironments_1.Selected.name}
                    );
                    Patch(AppUserSetting_UserSettings,DefaultEnvironment,
                        {Value: glrlEnvironments_1.Selected.name}
                    );
                    Select(fncLoadSolutions_1);
                PaddingBottom: =0
                PaddingLeft: =0
                PaddingRight: =0
                PaddingTop: =0
                Size: =15
                Text: =ThisItem.properties.linkedEnvironmentMetadata.friendlyName
                Width: =400
                Wrap: =false
                X: =61
                Y: =9
                ZIndex: =1

            imgEnvironment_2 As image:
                BorderColor: =ColorFade(imgEnvironment_2.Fill, -20%)
                Height: =43
                HoverBorderColor: =ColorFade(imgEnvironment_2.BorderColor, 20%)
                HoverFill: =ColorFade(imgEnvironment_2.Fill, 20%)
                Image: |-
                    ="data:image/svg+xml,"
                    & EncodeUrl("<svg width='16px' height='16px' xmlns='http://www.w3.org/2000/svg'><g><path fill='#742774' class='image-264' d='M15,10h-1.809C13.702,9.117,14,8.094,14,7c0-3.314-2.686-6-6-6S2,3.686,2,7c0,1.094,0.298,2.117,0.809,3H1l-1,5h16L15,10z     M4.854,10.854l-0.708-0.708C3.859,9.795,3.606,9.417,3.422,8.997h1.752c0.182,1.03,0.498,1.933,0.91,2.618   C5.632,11.427,5.228,11.16,4.854,10.854z M6.187,8.997h3.626C9.448,10.873,8.619,12,8,12S6.552,10.873,6.187,8.997z M6,7  c0-0.351,0.019-0.682,0.048-1.003h3.904C9.981,6.318,10,6.649,10,7c0,0.349-0.019,0.679-0.048,0.997H6.048C6.019,7.679,6,7.349,6,7z     M8,2c0.619,0,1.447,1.124,1.812,2.997H6.188C6.553,3.124,7.381,2,8,2z M13,7c0,0.341-0.035,0.675-0.101,0.997h-1.944   C10.982,7.672,11,7.341,11,7c0-0.342-0.018-0.676-0.045-1.003h1.944C12.965,6.321,13,6.657,13,7z M10.826,8.997h1.752   c-0.184,0.42-0.437,0.798-0.723,1.148l-0.708,0.708c-0.373,0.305-0.778,0.573-1.229,0.761C10.328,10.93,10.644,10.027,10.826,8.997z   M12.575,4.997h-1.75c-0.182-1.028-0.498-1.929-0.909-2.612C11.104,2.88,12.058,3.821,12.575,4.997z M6.084,2.385    C5.673,3.068,5.357,3.97,5.175,4.997h-1.75C3.942,3.821,4.896,2.88,6.084,2.385z M3.101,5.997h1.944C5.018,6.324,5,6.658,5,7    c0,0.341,0.018,0.672,0.045,0.997H3.101C3.035,7.675,3,7.341,3,7C3,6.657,3.035,6.321,3.101,5.997z M1.22,14l0.6-3h1.717    C4.635,12.225,6.225,13,8,13s3.365-0.775,4.463-2h1.717l0.6,3H1.22z'></path></g></svg>")
                    
                    //LookUp(ThemeStyles, Name = "PrimaryColor4Value").Value
                OnSelect: |-
                    =UpdateContext(
                        {
                            showDialogOverlay: true,
                            showEnvironmentDialog: true
                        }
                    )
                PressedBorderColor: =ColorFade(imgEnvironment_2.BorderColor, -20%)
                PressedFill: =ColorFade(imgEnvironment_2.Fill, -20%)
                Width: =50
                X: =11
                Y: =9
                ZIndex: =2

        lblEnvironmentDialogEnvironments_1 As label:
            Align: =Align.Center
            FontWeight: =Semibold
            Size: =16
            Text: ="Select Your Maker Environment"
            Width: =450
            X: =12
            Y: =10
            ZIndex: =2

        icoEnvironmentsClose_1 As icon.Cancel:
            BorderColor: =ColorFade(icoEnvironmentsClose_1.Fill, -20%)
            DisabledFill: =ColorFade(icoEnvironmentsClose_1.Fill, -80%)
            Height: =50
            HoverBorderColor: =ColorFade(icoEnvironmentsClose_1.BorderColor, 20%)
            HoverColor: =ColorFade(icoEnvironmentsClose_1.Color, 20%)
            HoverFill: =ColorFade(icoEnvironmentsClose_1.Fill, 20%)
            Icon: =Icon.Cancel
            OnSelect: |-
                =UpdateContext(
                    {
                        showDialogOverlay: false,
                        showEnvironmentDialog: false
                    }
                )
            PaddingBottom: =10
            PaddingLeft: =10
            PaddingRight: =10
            PaddingTop: =10
            PressedBorderColor: =ColorFade(icoEnvironmentsClose_1.BorderColor, -20%)
            PressedColor: =ColorFade(icoEnvironmentsClose_1.Color, -20%)
            PressedFill: =ColorFade(icoEnvironmentsClose_1.Fill, -20%)
            Width: =50
            X: =450
            Y: =5
            ZIndex: =3

    DeployDialog As groupContainer:
        DisplayMode: =DisplayMode.Edit
        Height: =1080
        Visible: =showCommitDialog
        Width: =550
        X: =1370
        ZIndex: =25

        CommitRectangle_1 As rectangle:
            BorderColor: =ColorFade(CommitRectangle_1.Fill, -20%)
            DisabledFill: =CommitRectangle_1.Fill
            Fill: =RGBA(255, 255, 255, 1)
            Height: =1080
            HoverFill: =ColorFade(CommitRectangle_1.Fill, 20%)
            PressedFill: =ColorFade(CommitRectangle_1.Fill, -20%)
            Visible: =showCommitDialog
            Width: =550
            ZIndex: =1

        btnCommit_1 As button:
            Height: =45
            HoverBorderColor: =ColorFade(btnCommit_1.BorderColor, 20%)
            HoverColor: =ColorFade(btnCommit_1.Color, 20%)
            HoverFill: =ColorFade(btnCommit_1.Fill, 20%)
            OnSelect: |
                =UpdateContext(
                    {
                        showDialogOverlay: false,
                        showCommitDialog: false
                    }
                );
                ClearCollect(
                    locPipelines,
                    CustomAzureDevOps.GetPipelines(
                        drpAdoOrganizations_1.Selected.AccountName,
                        drpAdoProjects_1.Selected.name
                    ).value
                );
                //See if an export pipeline exists for the specific solution
                UpdateContext(
                    {
                        piplineIdToRun: LookUp(
                            locPipelines,
                            name = "export-solution-to-git-" & glrMakerSolutions.Selected.uniquename
                        ).id
                    }
                );
                //If an export pipeline doesn't exist for the specific solution see if an export pipeline exists for the specific repo
                If(
                    IsBlank(piplineIdToRun),
                    UpdateContext(
                        {
                            piplineIdToRun: LookUp(
                                locPipelines,
                                name = "export-solution-to-git-" & DefaultRepo.Value
                            ).id
                        }
                    )
                );
                //Otherwise we will default to the standard export pipeline
                If(
                    IsBlank(piplineIdToRun),
                    UpdateContext(
                        {
                            piplineIdToRun: LookUp(
                                locPipelines,
                                name = "export-solution-to-git"
                            ).id
                        }
                    )
                );
                //Updated LookUp and Remove code to RemoveIf
                RemoveIf(
                    LastSavedExportToGitPipelineRuns,
                    solutionUniqueName = glrMakerSolutions.Selected.uniquename
                );
                If(
                    RepoOverridden,
                    Set(
                        varBranch,
                        txtBranch_1.Text
                    ),
                    Set(
                        varBranch,
                        drpAdoBranches_1.Selected.DisplayName
                    )
                );
                UpdateContext({locSolutionEnvironmentDeploySettingSearch: DeploymentSettingName & " - " & glrMakerSolutions.Selected.uniquename});
                ClearCollect(
                    SolutionDeploymentSettings,
                    {
                        EnvironmentUrl: LookUp(AllEnvironments, name = ExecutingEnvironment.tags.environmentName).properties.linkedEnvironmentMetadata.instanceUrl,
                        UserSettingId: ShowColumns(
                            Filter(
                                'User Settings',
                                locSolutionEnvironmentDeploySettingSearch in Name && Owner = gblCdsUser
                            ),
                            "cat_usersettingid"
                        )
                    }
                );
                Collect(
                    LastSavedExportToGitPipelineRuns,
                    {
                        solutionUniqueName: glrMakerSolutions.Selected.uniquename,
                        buildId: CustomAzureDevOps.RunPipeline(
                            drpAdoOrganizations_1.SelectedText.'data-ADB4D7A662F548B49FAC2B986E348A1BAccountName',
                            drpAdoProjects_1.Selected.name,
                            piplineIdToRun,
                            {
                                definition: {id: piplineIdToRun},
                                variables: {
                                    Project: {value: drpAdoProjects_1.Selected.name},
                                    Repo: {value: DefaultRepo.Value},
                                    SolutionName: {value: glrMakerSolutions.Selected.uniquename},
                                    Email: {value: gblUser.Email},
                                    UserName: {value: gblUser.FullName},
                                    CommitMessage: {value: txtDeployNotes.Text},
                                    Branch: {value: varBranch},
                                    BranchToCreate: {value: txtBranchToCreate_1.Text},
                                    ServiceConnection: {value: lblAzureDevOpsServiceConnectionValue_1.Text},
                                    BuildDefinitionId: {value: ""},
                                    PipelineId: {value: piplineIdToRun},
                                    ImportUnmanaged: {value: ""},
                                    EnvironmentName: {value: ""},
                                    Data: {value: JSON(SolutionDeploymentSettings)}
                                }
                            }
                        ).id
                    }
                );
                //Get records created by logged in CDS user. 
                UpdateContext(
                    {
                        locLastSavedExportToGitPipelineRunsSetting: LookUp(
                            'User Settings',
                            Name = LastSavedExportToGitPipelineRunsSettingName && Owner = gblCdsUser
                        )
                    }
                );
                UpdateContext(
                    {
                        locTempLastSavedExportToGitPipelineRunsCSV: Concat(
                            LastSavedExportToGitPipelineRuns,
                            solutionUniqueName & "," & buildId & "|"
                        )
                    }
                );
                If(
                    IsBlank(locLastSavedExportToGitPipelineRunsSetting),// create it if we don't have one
                    Patch(
                        'User Settings',
                        {
                            'App User Setting': AppUserSetting,
                            Name: LastSavedExportToGitPipelineRunsSettingName,
                            Value: locTempLastSavedExportToGitPipelineRunsCSV
                        }
                    );
                    Patch(
                        AppUserSetting_UserSettings,
                        {
                            'App User Setting': AppUserSetting,
                            Name: LastSavedExportToGitPipelineRunsSettingName,
                            Value: locTempLastSavedExportToGitPipelineRunsCSV
                        }
                    ),
                    Patch(
                        'User Settings',
                        locLastSavedExportToGitPipelineRunsSetting,
                        {Value: locTempLastSavedExportToGitPipelineRunsCSV}
                    );
                    Patch(
                        AppUserSetting_UserSettings,
                        locLastSavedExportToGitPipelineRunsSetting,
                        {Value: locTempLastSavedExportToGitPipelineRunsCSV}
                    )
                );
                If(
                    Len(txtBranchToCreate_1.Text) > 0,
                    //Replaced Lookup and Remove code with RemoveIf
                    RemoveIf(
                        LastSavedBranchesCreated,
                        solutionUniqueName = glrMakerSolutions.Selected.uniquename
                    );
                    Collect(
                        LastSavedBranchesCreated,
                        {
                            solutionUniqueName: glrMakerSolutions.Selected.uniquename,
                            branchName: txtBranchToCreate_1.Text
                        }
                    );
                    UpdateContext(
                        {
                            locTempLastSavedBranchesCreatedCSV: Concat(
                                LastSavedBranchesCreated,
                                solutionUniqueName & "," & branchName & "|"
                            )
                        }
                    );
                    //Get records created by logged in CDS user. 
                UpdateContext(
                        {
                            locLastSavedBranchesCreatedSetting: LookUp(
                                'User Settings',
                                Name = LastSavedBranchesCreatedSettingName && Owner = gblCdsUser
                            )
                        }
                    );
                    If(
                        IsBlank(locLastSavedBranchesCreatedSetting),// create it if we don't have one
                        Patch(
                            'User Settings',
                            {
                                'App User Setting': AppUserSetting,
                                Name: LastSavedBranchesCreatedSettingName,
                                Value: locTempLastSavedBranchesCreatedCSV
                            }
                        );
                        Patch(
                            AppUserSetting_UserSettings,
                            {
                                'App User Setting': AppUserSetting,
                                Name: LastSavedBranchesCreatedSettingName,
                                Value: locTempLastSavedBranchesCreatedCSV
                            }
                        ),
                        Patch(
                            'User Settings',
                            locLastSavedBranchesCreatedSetting,
                            {Value: locTempLastSavedBranchesCreatedCSV}
                        );
                        Patch(
                            AppUserSetting_UserSettings,
                            locLastSavedBranchesCreatedSetting,
                            {Value: locTempLastSavedBranchesCreatedCSV}
                        )
                    );
                    
                );
                Select(fncResetCheckBuildStatuses_1);
                Reset(tglCreateBranch_1);
                Reset(txtDeployNotes);
                Reset(txtBranchToCreate_1);
            PressedBorderColor: =btnCommit_1.Fill
            PressedColor: =btnCommit_1.Fill
            PressedFill: =btnCommit_1.Color
            Text: ="DEPLOY"
            Width: =200
            X: =330
            Y: =1015
            ZIndex: =3

        txtBranchToCreate_1 As text:
            Default: =locNewBranchText
            Height: =45
            HintText: ="Enter new branch name to create branch"
            HoverBorderColor: =ColorFade(txtBranchToCreate_1.BorderColor, 20%)
            HoverColor: =ColorFade(txtBranchToCreate_1.Color, 20%)
            HoverFill: =ColorFade(txtBranchToCreate_1.Fill, 20%)
            OnChange: |-
                =If(
                   IsBlank(Find(" ", txtBranchToCreate_1.Text)),
                   true ,
                   Notify("The Branch Name cannot contain spaces. Please enter a Branch Name without spaces.",NotificationType.Error);
                )
            PressedBorderColor: =txtBranchToCreate_1.HoverBorderColor
            PressedColor: =txtBranchToCreate_1.Color
            PressedFill: =txtBranchToCreate_1.Fill
            Visible: =tglCreateBranch_1.Value
            Width: =500
            X: =30
            Y: =241
            ZIndex: =5

        lblCommitPopUpTitle_1 As label:
            Align: =Align.Center
            FontWeight: =Semibold
            Height: =55
            Size: =16
            Text: ="DEPLOY TO ENVIRONMENT"
            Visible: =showCommitDialog
            Width: =550
            ZIndex: =11

        icoCommitDialogClose_1 As icon.Cancel:
            BorderColor: =ColorFade(icoCommitDialogClose_1.Fill, -20%)
            DisabledFill: =ColorFade(icoCommitDialogClose_1.Fill, -80%)
            Height: =55
            HoverBorderColor: =ColorFade(icoCommitDialogClose_1.BorderColor, 20%)
            HoverColor: =ColorFade(icoCommitDialogClose_1.Color, 20%)
            HoverFill: =ColorFade(icoCommitDialogClose_1.Fill, 20%)
            Icon: =Icon.Cancel
            OnSelect: |-
                =UpdateContext({showDialogOverlay: false, showCommitDialog: false})
            PaddingBottom: =10
            PaddingLeft: =10
            PaddingRight: =10
            PaddingTop: =10
            PressedBorderColor: =ColorFade(icoCommitDialogClose_1.BorderColor, -20%)
            PressedColor: =ColorFade(icoCommitDialogClose_1.Color, -20%)
            PressedFill: =ColorFade(icoCommitDialogClose_1.Fill, -20%)
            Width: =52
            X: =498
            ZIndex: =14

        tglCreateBranch_1 As toggleSwitch:
            FalseFill: =RGBA(237, 237, 237, 1)
            FalseHoverFill: =ColorFade(tglCreateBranch_1.FalseFill, 20%)
            FalseText: ="Create New Branch"
            FontWeight: =FontWeight.Semibold
            HandleFill: =If(tglCreateBranch_1.Value, PrimaryColor1Value, PrimaryColor2Value)
            HoverBorderColor: =ColorFade(tglCreateBranch_1.BorderColor, 20%)
            OnChange: =Set(locNewBranchText,  ""); Reset(txtBranchToCreate_1);
            PressedBorderColor: =ColorFade(tglCreateBranch_1.BorderColor, -20%)
            TrueHoverFill: =ColorFade(tglCreateBranch_1.TrueFill, 20%)
            TrueText: ="Create New Branch"
            Visible: =false
            Width: =225
            X: =30
            Y: =94
            ZIndex: =16

        cntDeployAlwaysVisible As groupContainer:
            BorderColor: =RGBA(0, 0, 0, 0)
            DisplayMode: =DisplayMode.Edit
            Height: =303
            Width: =510
            X: =29
            Y: =110
            ZIndex: =17

            drpAdoBranches_1 As dropdown:
                ChevronHoverBackground: =ColorFade(drpAdoBranches_1.ChevronBackground, 20%)
                ChevronHoverFill: =ColorFade(drpAdoBranches_1.ChevronFill, 20%)
                Default: =locDefaultBranchForCommit
                Height: =45
                HoverBorderColor: =ColorFade(drpAdoBranches_1.BorderColor, 20%)
                HoverColor: =ColorFade(drpAdoBranches_1.Color, 20%)
                HoverFill: =ColorFade(drpAdoBranches_1.SelectionFill, 20%)
                Items: =DeploymentEnvironments
                OnChange: =
                OnSelect: =
                PressedBorderColor: =drpAdoBranches_1.HoverBorderColor
                PressedColor: =drpAdoBranches_1.Fill
                PressedFill: =drpAdoBranches_1.Color
                Visible: =!RepoOverridden
                Width: =498
                X: =1
                Y: =45
                ZIndex: =2

            txtDeployNotes As text:
                Default: =""
                EnableSpellCheck: =true
                Height: =90
                HintText: ="Enter notes about this deployment"
                HoverBorderColor: =ColorFade(txtDeployNotes.BorderColor, 20%)
                HoverColor: =ColorFade(txtDeployNotes.Color, 20%)
                HoverFill: =ColorFade(txtDeployNotes.Fill, 20%)
                Mode: =TextMode.MultiLine
                OnChange: |-
                    =If(
                       IsBlank(Find(Char(10), txtDeployNotes.Text)),
                       true ,
                       Notify("The Commit Message cannot contain carriage returns. Please enter a Commit Message without carriage returns.",NotificationType.Error);
                    )
                PressedBorderColor: =txtDeployNotes.HoverBorderColor
                PressedColor: =txtDeployNotes.Color
                PressedFill: =txtDeployNotes.Fill
                Visible: =showCommitDialog
                Width: =498
                X: =1
                Y: =144
                ZIndex: =3

            lblDeployNotes As label:
                FontWeight: =FontWeight.Semibold
                Height: =45
                PaddingLeft: =0
                Text: ="Deployment Notes"
                Visible: =showCommitDialog
                Width: =498
                X: =1
                Y: =99
                ZIndex: =4

            lblBranch_1 As label:
                FontWeight: =FontWeight.Semibold
                Height: =45
                PaddingLeft: =0
                PaddingTop: =0
                Text: ="Environment"
                Visible: =showCommitDialog
                Width: =500
                X: =1
                ZIndex: =5

            txtBranch_1 As text:
                Default: =locDefaultBranchForCommit
                Height: =45
                HoverBorderColor: =ColorFade(txtBranch_1.BorderColor, 20%)
                HoverColor: =ColorFade(txtBranch_1.Color, 20%)
                HoverFill: =ColorFade(txtBranch_1.Fill, 20%)
                PressedBorderColor: =txtBranch_1.HoverBorderColor
                PressedColor: =txtBranch_1.Color
                PressedFill: =txtBranch_1.Fill
                Visible: =RepoOverridden
                Width: =500
                Y: =45
                ZIndex: =7

        lblDeploySolutionFriendlyName As label:
            Align: =Center
            FontWeight: =FontWeight.Semibold
            Height: =27
            Size: =16
            Text: =glrMakerSolutions.Selected.friendlyname
            Width: =548
            Y: =54
            ZIndex: =20

    MakerImportDialog As groupContainer:
        DisplayMode: =DisplayMode.Edit
        Height: =1080
        Visible: =showImportDialog
        Width: =550
        X: =1370
        ZIndex: =26

        ImportDialogRectangle_1 As rectangle:
            BorderColor: =ColorFade(ImportDialogRectangle_1.Fill, -20%)
            DisabledFill: =ImportDialogRectangle_1.Fill
            Fill: =RGBA(255, 255, 255, 1)
            Height: =1080
            HoverFill: =ColorFade(ImportDialogRectangle_1.Fill, 20%)
            PressedFill: =ColorFade(ImportDialogRectangle_1.Fill, -20%)
            Width: =550
            ZIndex: =1

        btnImport_1 As button:
            Height: =45
            HoverBorderColor: =ColorFade(btnImport_1.BorderColor, 20%)
            HoverColor: =ColorFade(btnImport_1.Color, 20%)
            HoverFill: =ColorFade(btnImport_1.Fill, 20%)
            OnSelect: |
                =UpdateContext(
                    {
                        showImportDialog: false,
                        showDialogOverlay: false
                    }
                );
                UpdateContext(
                    {
                        piplineToRun: LookUp(
                            CustomAzureDevOps.GetPipelines(
                                drpAdoOrganizations_1.Selected.AccountName,
                                drpAdoProjects_1.Selected.name
                            ).value,
                            name = "import-unmanaged-to-dev-environment"
                        )
                    }
                );
                Collect(
                    LastSavedImportPipelineRuns,
                    {
                        solutionUniqueName: drpSolutionFolders_1.Selected.DisplayName,
                        buildId: CustomAzureDevOps.RunPipeline(
                            drpAdoOrganizations_1.Selected.AccountName,
                            drpAdoProjects_1.Selected.name,
                            piplineToRun.id,
                            {
                                definition: {id: piplineToRun.id},
                                variables: {
                                    Project: {value: drpAdoProjects_1.Selected.name},
                                    Repo: {value: drpRepos_1.Selected.name},
                                    SolutionName: {value: drpSolutionFolders_1.Selected.DisplayName},
                                    Email: {value: User().Email},
                                    UserName: {value: User().FullName},
                                    CommitMessage: {value: ""},
                                    Branch: {value: dpBranchName_1.Selected.name},
                                    BranchToCreate: {value: ""},
                                    ServiceConnection: {value: lblAzureDevOpsServiceConnectionValue_1.Text},
                                    TriggerSolutionUpgrade: {value: ""},
                                    BuildDefinitionId: {value: ""},
                                    PipelineId: {value: ""},
                                    ImportUnmanaged: {value: "true"},
                                    EnvironmentName: { value: drpConfigFolders_1.Selected.DisplayName },
                                    Data: { value: "{test: """"}"}
                                }
                            }
                        ).id
                    }
                );
                //Get records created by logged in CDS user. 
                UpdateContext(
                    {
                        locLastSavedImportPipelineRunsSetting: LookUp(
                            'User Settings',
                            Name = LastSavedImportPipelineRunsSettingName && Owner = gblCdsUser
                        )
                    }
                );
                UpdateContext(
                    {
                        locTempLastSavedImportPipelineRunsCSV: Concat(
                            LastSavedImportPipelineRuns,
                            solutionUniqueName & "," & buildId & "|"
                        )
                    }
                );
                If(
                    IsBlank(locLastSavedImportPipelineRunsSetting),// create it if we don't have one
                    Patch(
                        'User Settings',
                        {
                            'App User Setting': AppUserSetting,
                            Name: LastSavedImportPipelineRunsSettingName,
                            Value: locTempLastSavedImportPipelineRunsCSV
                        }
                    );
                    Patch(
                        AppUserSetting_UserSettings,
                        {
                            'App User Setting': AppUserSetting,
                            Name: LastSavedImportPipelineRunsSettingName,
                            Value: locTempLastSavedImportPipelineRunsCSV
                        }
                    ),
                    Patch(
                        'User Settings',
                        locLastSavedImportPipelineRunsSetting,
                        {Value: locTempLastSavedImportPipelineRunsCSV}
                    );
                     Patch(
                        AppUserSetting_UserSettings,
                        locLastSavedImportPipelineRunsSetting,
                        {Value: locTempLastSavedImportPipelineRunsCSV}
                    )
                );
                UpdateContext ({locImportingSolutionBuildId: Last(LastSavedImportPipelineRuns).buildId});
                Select(fncResetCheckBuildStatuses_1);
            PressedBorderColor: =btnImport_1.Fill
            PressedColor: =btnImport_1.Fill
            PressedFill: =btnImport_1.Color
            Text: ="IMPORT"
            Width: =200
            X: =330
            Y: =1010
            ZIndex: =2

        lblImportDialogTitle_1 As label:
            Align: =Center
            FontWeight: =Semibold
            Height: =55
            Size: =20
            Text: ="IMPORT FROM AZURE DEVOPS"
            Width: =550
            ZIndex: =7

        icoImportDialogClose_1 As icon.Cancel:
            BorderColor: =ColorFade(icoImportDialogClose_1.Fill, -20%)
            DisabledFill: =ColorFade(icoImportDialogClose_1.Fill, -80%)
            Height: =55
            HoverBorderColor: =ColorFade(icoImportDialogClose_1.BorderColor, 20%)
            HoverColor: =ColorFade(icoImportDialogClose_1.Color, 20%)
            HoverFill: =ColorFade(icoImportDialogClose_1.Fill, 20%)
            Icon: =Icon.Cancel
            OnSelect: |-
                =UpdateContext({showDialogOverlay:false, showImportDialog:false})
            PaddingBottom: =10
            PaddingLeft: =10
            PaddingRight: =10
            PaddingTop: =10
            PressedBorderColor: =ColorFade(icoImportDialogClose_1.BorderColor, -20%)
            PressedColor: =ColorFade(icoImportDialogClose_1.Color, -20%)
            PressedFill: =ColorFade(icoImportDialogClose_1.Fill, -20%)
            Width: =55
            X: =495
            ZIndex: =8

        drpSolutionFolders_1 As dropdown:
            ChevronHoverBackground: =ColorFade(drpSolutionFolders_1.ChevronBackground, 20%)
            ChevronHoverFill: =ColorFade(drpSolutionFolders_1.ChevronFill, 20%)
            Default: =DefaultBranchSolutionFolder
            HoverBorderColor: =ColorFade(drpSolutionFolders_1.BorderColor, 20%)
            HoverColor: =ColorFade(drpSolutionFolders_1.Color, 20%)
            HoverFill: =ColorFade(drpSolutionFolders_1.SelectionFill, 20%)
            Items: =BranchSolutionFolders
            OnChange: =Select(fncRefreshBranchFolders_1)
            PressedBorderColor: =drpSolutionFolders_1.HoverBorderColor
            PressedColor: =drpSolutionFolders_1.Fill
            PressedFill: =drpSolutionFolders_1.Color
            Width: =506
            X: =30
            Y: =194
            ZIndex: =14

        lblSolutionBuild_1 As label:
            FontWeight: =FontWeight.Semibold
            PaddingLeft: =0
            Text: ="Solution Folder"
            Width: =200
            X: =30
            Y: =154
            ZIndex: =15

        dpBranchName_1 As dropdown:
            ChevronHoverBackground: =ColorFade(dpBranchName_1.ChevronBackground, 20%)
            ChevronHoverFill: =ColorFade(dpBranchName_1.ChevronFill, 20%)
            HoverBorderColor: =ColorFade(dpBranchName_1.BorderColor, 20%)
            HoverColor: =ColorFade(dpBranchName_1.Color, 20%)
            HoverFill: =ColorFade(dpBranchName_1.SelectionFill, 20%)
            Items: =SelectedRepoBranches
            OnChange: =Select(fncRefreshBranchFolders_1);
            PressedBorderColor: =dpBranchName_1.HoverBorderColor
            PressedColor: =dpBranchName_1.Fill
            PressedFill: =dpBranchName_1.Color
            Width: =506
            X: =30
            Y: =112
            ZIndex: =16

        lblBranchName_1 As label:
            FontWeight: =FontWeight.Semibold
            PaddingLeft: =0
            Text: ="Branch Name"
            Width: =486
            X: =30
            Y: =72
            ZIndex: =17

        "glrSolutionImportHistory_1 As gallery.'BrowseLayout_Vertical_TwoTextOneImageVariant_ver4.0'":
            Height: =620
            Items: =Search(SolutionsImportLatestBuildStatuses, drpSolutionFolders_1.Selected.DisplayName,"uniquename")
            Layout: =Layout.Vertical
            TemplatePadding: =0
            TemplateSize: =90
            Visible: =CountRows(glrSolutionImportHistory_1.AllItems) > 0
            Width: =500
            X: =32
            Y: =374
            ZIndex: =18

            lblPipelineName_1 As label:
                Height: =35
                OnSelect: =Select(Parent)
                PaddingBottom: =0
                PaddingLeft: =0
                PaddingRight: =0
                PaddingTop: =0
                Size: =14
                Text: =ThisItem.importSolutionStatus.buildNumber
                VerticalAlign: =VerticalAlign.Top
                Width: =374
                X: =76
                Y: =15
                ZIndex: =1

            lblPipelineStartDateTime_1 As label:
                Height: =32
                OnSelect: =Select(Parent)
                PaddingBottom: =0
                PaddingLeft: =0
                PaddingRight: =0
                PaddingTop: =0
                Size: =14
                Text: =Text(DateTimeValue(ThisItem.importSolutionStatus.finishTime), LongDateTime)
                VerticalAlign: =VerticalAlign.Top
                Width: =398
                X: =lblPipelineName_1.X
                Y: =45
                ZIndex: =2

            Separator1_1 As rectangle:
                BorderColor: =ColorFade(Separator1_1.Fill, -20%)
                DisabledFill: =Separator1_1.Fill
                Height: =1
                HoverFill: =ColorFade(Separator1_1.Fill, 20%)
                OnSelect: =Select(Parent)
                PressedFill: =ColorFade(Separator1_1.Fill, -20%)
                Width: =Parent.TemplateWidth
                Y: =Parent.TemplateHeight - 1
                ZIndex: =3

            imgImportStatusHistory_1 As image:
                BorderColor: =ColorFade(imgImportStatusHistory_1.Fill, -20%)
                DisplayMode: =DisplayMode.View
                Height: =44
                HoverBorderColor: =ColorFade(imgImportStatusHistory_1.BorderColor, 20%)
                HoverFill: =ColorFade(imgImportStatusHistory_1.Fill, 20%)
                Image: |-
                    =With(
                        {
                            gitStatus: ThisItem.importSolutionStatus.status,
                            gitResult: ThisItem.importSolutionStatus.result
                        },
                        If(
                            IsBlank(gitStatus),
                            LookUp(
                                StageStatesIcons,
                                state = "empty"
                            ).image,
                            If(
                                gitStatus = "completed",
                                LookUp(
                                    StageStatesIcons,
                                    state = gitResult
                                ).image,
                                LookUp(
                                    StageStatesIcons,
                                    state = gitStatus
                                ).image
                            )
                        )
                    )
                OnSelect: |
                    =Select(Parent);
                    Launch(
                        ThisItem.importSolutionStatus._links.web.href
                    );
                PaddingBottom: =10
                PaddingTop: =10
                PressedBorderColor: =ColorFade(imgImportStatusHistory_1.BorderColor, -20%)
                PressedFill: =ColorFade(imgImportStatusHistory_1.Fill, -20%)
                Tooltip: =
                Width: =48
                X: =12
                Y: =15
                ZIndex: =5

            icoLaunchImportBuildUrl_1 As icon.Add:
                BorderColor: =ColorFade(icoLaunchImportBuildUrl_1.Fill, -20%)
                Color: =RGBA(0, 0, 0, 0)
                DisabledFill: =ColorFade(icoLaunchImportBuildUrl_1.Fill, -80%)
                Fill: =RGBA(0, 0, 0, 0)
                Height: =82
                HoverBorderColor: =ColorFade(icoLaunchImportBuildUrl_1.BorderColor, 20%)
                HoverColor: =ColorFade(icoLaunchImportBuildUrl_1.Color, 20%)
                HoverFill: =ColorFade(icoLaunchImportBuildUrl_1.Fill, 20%)
                Icon: =Icon.Add
                OnSelect: |
                    =Select(Parent);
                    Launch(
                        ThisItem.importSolutionStatus._links.web.href
                    );
                PressedBorderColor: =ColorFade(icoLaunchImportBuildUrl_1.BorderColor, -20%)
                PressedColor: =ColorFade(icoLaunchImportBuildUrl_1.Color, -20%)
                PressedFill: =ColorFade(icoLaunchImportBuildUrl_1.Fill, -20%)
                Tooltip: =
                Width: =48
                X: =12
                Y: =5
                ZIndex: =7

        lblSolutionImportHistory_1 As label:
            Align: =Left
            FontWeight: =FontWeight.Semibold
            Height: =39
            PaddingLeft: =0
            Text: =Concatenate(drpSolutionFolders_1.SelectedText.'data-ADB4D7A662F548B49FAC2B986E348A1BDisplayName', " Import History")
            Width: =497
            X: =30
            Y: =335
            ZIndex: =19

        lblSolutionImportHistoryEmpty_1 As label:
            Height: =39
            PaddingLeft: =0
            Text: ="There is no import history for this solution"
            Visible: =CountRows(glrSolutionImportHistory_1.AllItems) = 0
            Width: =497
            X: =32
            Y: =374
            ZIndex: =20

        drpConfigFolders_1 As dropdown:
            ChevronHoverBackground: =ColorFade(drpConfigFolders_1.ChevronBackground, 20%)
            ChevronHoverFill: =ColorFade(drpConfigFolders_1.ChevronFill, 20%)
            Default: =
            HoverBorderColor: =ColorFade(drpConfigFolders_1.BorderColor, 20%)
            HoverColor: =ColorFade(drpConfigFolders_1.Color, 20%)
            HoverFill: =ColorFade(drpConfigFolders_1.SelectionFill, 20%)
            Items: =BranchConfigFolders
            OnChange: =
            PressedBorderColor: =drpConfigFolders_1.HoverBorderColor
            PressedColor: =drpConfigFolders_1.Fill
            PressedFill: =drpConfigFolders_1.Color
            Width: =506
            X: =30
            Y: =274
            ZIndex: =21

        lblConfigFolder_1 As label:
            FontWeight: =FontWeight.Semibold
            PaddingLeft: =0
            Text: ="Configuration"
            Width: =200
            X: =30
            Y: =234
            ZIndex: =22

    MakerSettingsDialog As groupContainer:
        DisplayMode: =DisplayMode.Edit
        Fill: =RGBA(0, 0, 0, .5)
        Height: =1080
        Visible: =showSettingsDialog
        Width: =550
        X: =1370
        ZIndex: =27

        SettingsRectangle_1 As rectangle:
            BorderColor: =ColorFade(SettingsRectangle_1.Fill, -20%)
            DisabledFill: =SettingsRectangle_1.Fill
            Fill: =RGBA(255, 255, 255, 1)
            Height: =1080
            HoverFill: =ColorFade(SettingsRectangle_1.Fill, 20%)
            PressedFill: =ColorFade(SettingsRectangle_1.Fill, -20%)
            Width: =550
            ZIndex: =1

        lblSettingsPopUpTitle_1 As label:
            Align: =Center
            FontWeight: =Semibold
            Height: =64
            Size: =16
            Text: ="SETTINGS"
            Width: =546
            ZIndex: =2

        icoSettingsClose_1 As icon.Cancel:
            BorderColor: =ColorFade(icoSettingsClose_1.Fill, -20%)
            DisabledFill: =ColorFade(icoSettingsClose_1.Fill, -80%)
            Height: =55
            HoverBorderColor: =ColorFade(icoSettingsClose_1.BorderColor, 20%)
            HoverColor: =ColorFade(icoSettingsClose_1.Color, 20%)
            HoverFill: =ColorFade(icoSettingsClose_1.Fill, 20%)
            Icon: =Icon.Cancel
            OnSelect: |-
                =UpdateContext({showDialogOverlay:false,showSettingsDialog:false})
            PaddingBottom: =10
            PaddingLeft: =10
            PaddingRight: =10
            PaddingTop: =10
            PressedBorderColor: =ColorFade(icoSettingsClose_1.BorderColor, -20%)
            PressedColor: =ColorFade(icoSettingsClose_1.Color, -20%)
            PressedFill: =ColorFade(icoSettingsClose_1.Fill, -20%)
            Width: =55
            X: =492
            Y: =8
            ZIndex: =3

        drpRepos_1 As dropdown:
            ChevronHoverBackground: =ColorFade(drpRepos_1.ChevronBackground, 20%)
            ChevronHoverFill: =ColorFade(drpRepos_1.ChevronFill, 20%)
            Default: =DefaultRepo.Value
            Height: =45
            HoverBorderColor: =ColorFade(drpRepos_1.BorderColor, 20%)
            HoverColor: =ColorFade(drpRepos_1.Color, 20%)
            HoverFill: =ColorFade(drpRepos_1.SelectionFill, 20%)
            Items: =SelectedProjectRepos
            OnChange: =Select(fncCollectSelectedRepoBranches_1)
            OnSelect: =
            PressedBorderColor: =drpRepos_1.HoverBorderColor
            PressedColor: =drpRepos_1.Fill
            PressedFill: =drpRepos_1.Color
            Visible: =!tglOverrideRepo_1.Value
            Width: =500
            X: =30
            Y: =331
            ZIndex: =4

        drpAdoOrganizations_1 As dropdown:
            ChevronHoverBackground: =ColorFade(drpAdoOrganizations_1.ChevronBackground, 20%)
            ChevronHoverFill: =ColorFade(drpAdoOrganizations_1.ChevronFill, 20%)
            Default: =DefaultOrg.Value
            Height: =45
            HoverBorderColor: =ColorFade(drpAdoOrganizations_1.BorderColor, 20%)
            HoverColor: =ColorFade(drpAdoOrganizations_1.Color, 20%)
            HoverFill: =ColorFade(drpAdoOrganizations_1.SelectionFill, 20%)
            Items: =Orgs
            OnChange: |
                =Set(
                    SelectedOrg,
                    drpAdoOrganizations_1.Selected
                );
                ClearCollect(
                    SelectedOrgProjects,
                    CustomAzureDevOps.GetProjects(SelectedOrg.AccountName).value
                );
                Set(
                    SelectedProject,
                    First(SelectedOrgProjects)
                );
                ClearCollect(
                    SelectedProjectPipelines,
                    CustomAzureDevOps.GetPipelines(
                        SelectedOrg.AccountName,
                        SelectedProject.name
                    ).value
                );
                ClearCollect(
                    SelectedProjectRepos,
                    CustomAzureDevOps.GetGitRepos(
                        SelectedOrg.AccountName,
                        SelectedProject.name
                    ).value
                );
            PressedBorderColor: =drpAdoOrganizations_1.HoverBorderColor
            PressedColor: =drpAdoOrganizations_1.Fill
            PressedFill: =drpAdoOrganizations_1.Color
            Width: =500
            X: =30
            Y: =145
            ZIndex: =5

        drpAdoProjects_1 As dropdown:
            ChevronHoverBackground: =ColorFade(drpAdoProjects_1.ChevronBackground, 20%)
            ChevronHoverFill: =ColorFade(drpAdoProjects_1.ChevronFill, 20%)
            Default: =DefaultProject.Value
            Height: =45
            HoverBorderColor: =ColorFade(drpAdoProjects_1.BorderColor, 20%)
            HoverColor: =ColorFade(drpAdoProjects_1.Color, 20%)
            HoverFill: =ColorFade(drpAdoProjects_1.SelectionFill, 20%)
            Items: =SelectedOrgProjects
            OnChange: =Select(fncCollectSelectedProjectRepos_1)
            PressedBorderColor: =drpAdoProjects_1.HoverBorderColor
            PressedColor: =drpAdoProjects_1.Fill
            PressedFill: =drpAdoProjects_1.Color
            Width: =500
            X: =30
            Y: =235
            ZIndex: =6

        lblAzureDevOpsOrg_1 As label:
            FontWeight: =FontWeight.Semibold
            Height: =45
            PaddingLeft: =0
            PaddingTop: =0
            Text: ="Azure DevOps Organization"
            Width: =500
            X: =30
            Y: =100
            ZIndex: =9

        lblAzureDevOpsProject_1 As label:
            FontWeight: =FontWeight.Semibold
            Height: =45
            PaddingLeft: =0
            PaddingTop: =0
            Text: ="Azure DevOps Project"
            Width: =458
            X: =30
            Y: =190
            ZIndex: =11

        lblAzureDevOpsRepo_1 As label:
            FontWeight: =FontWeight.Semibold
            Height: =45
            PaddingLeft: =0
            PaddingTop: =0
            Text: ="Repository"
            Width: =458
            X: =30
            Y: =286
            ZIndex: =12

        btnSaveSettings_1 As button:
            DisplayMode: =If(locIsSaveSettingsEnabled, DisplayMode.Edit, DisplayMode.Disabled)
            Height: =45
            HoverBorderColor: =ColorFade(btnSaveSettings_1.BorderColor, 20%)
            HoverColor: =ColorFade(btnSaveSettings_1.Color, 20%)
            HoverFill: =ColorFade(btnSaveSettings_1.Fill, 20%)
            OnSelect: |
                =UpdateContext(
                    {
                        showDialogOverlay: false,
                        showSettingsDialog: false
                    }
                );
                // Save new settings values in CDS
                Patch(
                    'User Settings',
                    DefaultOrg,
                    {Value: drpAdoOrganizations_1.Selected.AccountName}
                );
                Patch(
                    'User Settings',
                    DefaultProject,
                    {Value: drpAdoProjects_1.Selected.name}
                );
                If(
                    tglOverrideRepo_1.Value,
                    Patch(
                        'User Settings',
                        DefaultRepo,
                        {Value: txtRepoOverride_1.Text}
                    ),
                    Patch(
                        'User Settings',
                        DefaultRepo,
                        {Value: drpRepos_1.Selected.name}
                    )
                );
                Refresh('App User Settings');
                //Clear out the organization / project specific collections
                Clear(LastDeletedSolutionsPipelineRuns);
                Clear(LastSavedBranchesCreated);
                Clear(LastSavedExportToGitPipelineRuns);
                Clear(LastSavedImportPipelineRuns);
                Clear(LastSavedPullRequests);
                Navigate(RedirectToHome)
            PressedBorderColor: =btnSaveSettings_1.Fill
            PressedColor: =btnSaveSettings_1.Fill
            PressedFill: =btnSaveSettings_1.Color
            Text: ="SAVE"
            Width: =200
            X: =330
            Y: =1015
            ZIndex: =13

        lblAzureDevOpsServiceConnection_1 As label:
            FontWeight: =FontWeight.Semibold
            Height: =45
            PaddingLeft: =0
            PaddingTop: =0
            Text: ="Azure DevOps Service Connection"
            Width: =458
            X: =30
            Y: =385
            ZIndex: =15

        lblAzureDevOpsServiceConnectionValue_1 As label:
            Height: =55
            Text: =glrlEnvironments_1.Selected.properties.linkedEnvironmentMetadata.instanceUrl
            Width: =500
            X: =30
            Y: =415
            ZIndex: =16

        tglOverrideRepo_1 As toggleSwitch:
            Default: =RepoOverridden
            FalseFill: =RGBA(237, 237, 237, 1)
            FalseHoverFill: =ColorFade(tglOverrideRepo_1.FalseFill, 20%)
            FalseText: ="Override"
            FontWeight: =FontWeight.Semibold
            HandleFill: =If(tglOverrideRepo_1.Value, PrimaryColor1Value, PrimaryColor2Value)
            Height: =30
            HoverBorderColor: =ColorFade(tglOverrideRepo_1.BorderColor, 20%)
            OnUncheck: =
            PressedBorderColor: =ColorFade(tglOverrideRepo_1.BorderColor, -20%)
            TextPosition: =TextPosition.Left
            Tooltip: ="Use this option if you are source controlling your solutions in a repo other than Azure DevOps (e.g. GitHub)"
            TrueHoverFill: =ColorFade(tglOverrideRepo_1.TrueFill, 20%)
            TrueText: ="Override"
            Visible: =EnablePreviewFeatures
            Width: =150
            X: =386
            Y: =291
            ZIndex: =17

        txtRepoOverride_1 As text:
            Default: =DefaultRepo.Value
            Height: =45
            HoverBorderColor: =ColorFade(txtRepoOverride_1.BorderColor, 20%)
            HoverColor: =ColorFade(txtRepoOverride_1.Color, 20%)
            HoverFill: =ColorFade(txtRepoOverride_1.Fill, 20%)
            OnChange: =
            PressedBorderColor: =txtRepoOverride_1.HoverBorderColor
            PressedColor: =txtRepoOverride_1.Color
            PressedFill: =txtRepoOverride_1.Fill
            Visible: =tglOverrideRepo_1.Value
            Width: =500
            X: =30
            Y: =331
            ZIndex: =18

    btnMakerFunctions As groupContainer:
        DisplayMode: =DisplayMode.Edit
        Height: =320
        Visible: =false
        Width: =564
        X: =1
        Y: =760
        ZIndex: =28

        fncCollectSelectedRepoBranches_1 As button:
            Height: =50
            HoverBorderColor: =ColorFade(fncCollectSelectedRepoBranches_1.BorderColor, 20%)
            HoverColor: =ColorFade(fncCollectSelectedRepoBranches_1.Color, 20%)
            HoverFill: =ColorFade(fncCollectSelectedRepoBranches_1.Fill, 20%)
            OnSelect: |-
                =If(Not IsBlank(drpAdoOrganizations_1.Selected.AccountName),
                    ClearCollect(
                        SelectedRepoBranches,
                        AddColumns(
                            Filter(CustomAzureDevOps.GetBranches(
                                drpAdoOrganizations_1.Selected.AccountName,
                                drpAdoProjects_1.Selected.name,
                                drpRepos_1.Selected.id
                            ).value, "refs/heads/" in name),
                            "DisplayName",
                            Substitute(
                                name,
                                "refs/heads/",
                                ""
                            )
                        )
                    );
                );
                SortByColumns(SelectedRepoBranches, "DisplayName");
            PressedBorderColor: =fncCollectSelectedRepoBranches_1.Fill
            PressedColor: =fncCollectSelectedRepoBranches_1.Fill
            PressedFill: =fncCollectSelectedRepoBranches_1.Color
            Text: ="fncCollectSelectedRepoBranches"
            Width: =564
            Y: =101
            ZIndex: =1

        fncCollectSelectedProjectRepos_1 As button:
            Height: =50
            HoverBorderColor: =ColorFade(fncCollectSelectedProjectRepos_1.BorderColor, 20%)
            HoverColor: =ColorFade(fncCollectSelectedProjectRepos_1.Color, 20%)
            HoverFill: =ColorFade(fncCollectSelectedProjectRepos_1.Fill, 20%)
            OnSelect: |
                =If(
                    !tglOverrideRepo_1.Value,
                    ClearCollect(
                        SelectedProjectRepos,
                        CustomAzureDevOps.GetGitRepos(
                            drpAdoOrganizations_1.Selected.AccountName,
                            drpAdoProjects_1.Selected.name
                        ).value
                    )
                );
            PressedBorderColor: =fncCollectSelectedProjectRepos_1.Fill
            PressedColor: =fncCollectSelectedProjectRepos_1.Fill
            PressedFill: =fncCollectSelectedProjectRepos_1.Color
            Text: ="fncCollectSelectedProjectRepos"
            Width: =564
            Y: =51
            ZIndex: =2

        fncLoadSolutions_1 As button:
            Height: =50
            HoverBorderColor: =ColorFade(fncLoadSolutions_1.BorderColor, 20%)
            HoverColor: =ColorFade(fncLoadSolutions_1.Color, 20%)
            HoverFill: =ColorFade(fncLoadSolutions_1.Fill, 20%)
            OnSelect: |
                =UpdateContext({showLoader: true});
                Clear(SelectedEnvironmentSolutions);
                If(
                    Not IsBlank(SelectedEnvironment.properties.linkedEnvironmentMetadata.uniqueName),
                    
                    Collect(
                        SelectedEnvironmentSolutions,
                        GetEnvironmentSolutions.Run(
                            SelectedEnvironment.properties.linkedEnvironmentMetadata.uniqueName,
                            Last(FirstN(ClearCollect(splitCol, Split(SelectedEnvironment.properties.linkedEnvironmentMetadata.instanceUrl, ".")), 2)).Result
                        )
                    )
                
                );
                
                Select(fncResetCheckBuildStatuses_1);
                UpdateContext({showLoader: false});
            PressedBorderColor: =fncLoadSolutions_1.Fill
            PressedColor: =fncLoadSolutions_1.Fill
            PressedFill: =fncLoadSolutions_1.Color
            Text: ="fncLoadSolutions"
            Width: =562
            X: =2
            ZIndex: =3

        fncResetCheckBuildStatuses_1 As button:
            HoverBorderColor: =ColorFade(fncResetCheckBuildStatuses_1.BorderColor, 20%)
            HoverColor: =ColorFade(fncResetCheckBuildStatuses_1.Color, 20%)
            HoverFill: =ColorFade(fncResetCheckBuildStatuses_1.Fill, 20%)
            OnSelect: |
                =UpdateContext({locStartCheckBuildStatusTimer: false});
                Reset(tmrMakerCheckBuildAndPullRequestStatuses);
                UpdateContext({locStartCheckBuildStatusTimer: true});
            PressedBorderColor: =fncResetCheckBuildStatuses_1.Fill
            PressedColor: =fncResetCheckBuildStatuses_1.Fill
            PressedFill: =fncResetCheckBuildStatuses_1.Color
            Text: ="fncResetCheckBuildStatuses"
            Width: =562
            X: =1
            Y: =151
            ZIndex: =4

        fncReloadSolutions_1 As button:
            Height: =50
            HoverBorderColor: =ColorFade(fncReloadSolutions_1.BorderColor, 20%)
            HoverColor: =ColorFade(fncReloadSolutions_1.Color, 20%)
            HoverFill: =ColorFade(fncReloadSolutions_1.Fill, 20%)
            OnSelect: |
                =Clear(SelectedEnvironmentSolutions);
                If(
                    Not IsBlank(SelectedEnvironment.properties.linkedEnvironmentMetadata.uniqueName),
                    Collect(
                        SelectedEnvironmentSolutions,
                        GetEnvironmentSolutions.Run(
                            SelectedEnvironment.properties.linkedEnvironmentMetadata.uniqueName,
                            Last(FirstN(ClearCollect(splitCol, Split(SelectedEnvironment.properties.linkedEnvironmentMetadata.instanceUrl, ".")), 2)).Result
                        )
                    )
                );
                //Remove solution from last deleted pipelines when the solution is no longer available
                RemoveIf(
                    LastDeletedSolutionsPipelineRuns,
                    Not(solutionUniqueName in SelectedEnvironmentSolutions.uniquename)
                );
                Select(fncRefreshStatuses_1);
            PressedBorderColor: =fncReloadSolutions_1.Fill
            PressedColor: =fncReloadSolutions_1.Fill
            PressedFill: =fncReloadSolutions_1.Color
            Text: ="fncReloadSolutions"
            Width: =562
            X: =2
            Y: =40
            ZIndex: =5

        fncRefreshStatuses_1 As button:
            Height: =50
            HoverBorderColor: =ColorFade(fncRefreshStatuses_1.BorderColor, 20%)
            HoverColor: =ColorFade(fncRefreshStatuses_1.Color, 20%)
            HoverFill: =ColorFade(fncRefreshStatuses_1.Fill, 20%)
            OnSelect: |
                =UpdateContext(
                    {
                        locImportSolutionStatus: If(
                            locImportingSolutionBuildId > 0,
                            CustomAzureDevOps.GetBuild(
                                drpAdoOrganizations_1.Selected.AccountName,
                                drpAdoProjects_1.Selected.name,
                                locImportingSolutionBuildId
                            )
                        )
                    }
                );
                If(
                    locImportSolutionStatus.status = "completed",
                    If(
                        IsBlank(
                            LookUp(
                                SelectedEnvironmentSolutions,
                                drpSolutionFolders_1.Selected.DisplayName in uniquename
                            )
                        ),
                        Select(fncLoadSolutions_1);
                    );
                    UpdateContext(
                        {
                            locImportingSolutionBuildId: 0,
                            locImportSolutionStatus: Blank()
                        }
                    );
                    
                );
                If(
                    Not IsEmpty(drpAdoOrganizations_1.Selected.AccountName) And Not IsEmpty(drpAdoProjects_1.Selected.name),
                    ForAll(
                        SelectedEnvironmentSolutions As e,
                        Collect(
                            TempSolutionsLatestBuildStatuses,
                            {
                                uniquename: e.uniquename,
                                exportToGitStatus: If(
                                    !IsBlank(
                                        LookUp(
                                            LastSavedExportToGitPipelineRuns,
                                            solutionUniqueName = e.uniquename,
                                            buildId
                                        )
                                    ),
                                    CustomAzureDevOps.GetBuild(
                                        drpAdoOrganizations_1.Selected.AccountName,
                                        drpAdoProjects_1.Selected.name,
                                        LookUp(
                                            LastSavedExportToGitPipelineRuns,
                                            solutionUniqueName = e.uniquename,
                                            buildId
                                        )
                                    )
                                ),
                                deleteSolutionStatus: If(
                                    !IsBlank(
                                        LookUp(
                                            LastDeletedSolutionsPipelineRuns,
                                            solutionUniqueName = e.uniquename,
                                            buildId
                                        )
                                    ),
                                    CustomAzureDevOps.GetBuild(
                                        drpAdoOrganizations_1.Selected.AccountName,
                                        drpAdoProjects_1.Selected.name,
                                        LookUp(
                                            LastDeletedSolutionsPipelineRuns,
                                            solutionUniqueName = e.uniquename,
                                            buildId
                                        )
                                    )
                                ),
                                pullRequestStatus: If(
                                    !IsBlank(
                                        LookUp(
                                            LastSavedPullRequests,
                                            solutionUniqueName = e.uniquename,
                                            pullRequestId
                                        )
                                    ) And !tglOverrideRepo_1.Value,
                                    CustomAzureDevOps.GetPullReqeust(
                                        drpAdoOrganizations_1.Selected.AccountName,
                                        drpAdoProjects_1.Selected.name,
                                        drpRepos_1.Selected.id,
                                        LookUp(
                                            LastSavedPullRequests,
                                            solutionUniqueName = e.uniquename,
                                            pullRequestId
                                        )
                                    )
                                ),
                                solutionTargetBranchStatus: If(
                                    !IsBlank(
                                        LookUp(
                                            LastSavedPullRequests,
                                            solutionUniqueName = e.uniquename,
                                            targetBranchName
                                        )
                                    ),
                                    CustomAzureDevOps.GetBuilds(
                                        drpAdoOrganizations_1.Selected.AccountName,
                                        drpAdoProjects_1.Selected.name,
                                        {
                                            branchName: LookUp(
                                                LastSavedPullRequests,
                                                solutionUniqueName = e.uniquename,
                                                targetBranchName
                                            ),
                                            requestedFor: gblAzureDevOpsUserId,
                                            queryOrder: "queueTimeDescending",
                                            minTime: LookUp(
                                                SolutionsLatestBuildStatuses,
                                                uniquename = e.uniquename,
                                                pullRequestStatus
                                            ).closedDate//used to constrain number of results since $top was not working
                                        }
                                    ).value
                                ),
                                solutionReleaseBranchStatus: If(
                                    !IsBlank(
                                        LookUp(
                                            SolutionsLatestBuildStatuses,
                                            uniquename = e.uniquename,
                                            solutionTargetBranchStatus
                                        ).finishTime
                                    ) && !IsBlank(
                                        LookUp(
                                            SelectedProjectPipelines,
                                            name = "deploy-prod-" & e.uniquename
                                        ).id
                                    ),
                                    CustomAzureDevOps.GetBuilds(
                                        drpAdoOrganizations_1.Selected.AccountName,
                                        drpAdoProjects_1.Selected.name,
                                        {
                                            queryOrder: "queueTimeDescending",
                                            definitions: LookUp(
                                                SelectedProjectPipelines,
                                                name = "deploy-prod-" & e.uniquename
                                            ).id,
                                            minTime: First(
                                                LookUp(
                                                    SolutionsLatestBuildStatuses,
                                                    uniquename = e.uniquename,
                                                    solutionTargetBranchStatus
                                                )
                                            ).finishTime//used to constrain number of results since $top was not working
                                        }
                                    ).value
                                )
                            }
                        );
                    )
                );
                ClearCollect(
                    SolutionsLatestBuildStatuses,
                    TempSolutionsLatestBuildStatuses
                );
                Clear(TempSolutionsLatestBuildStatuses);
                //Remove any deleted solutions and refresh
                ClearCollect(
                    TempSelectedEnvironmentSolutions,
                    Filter(
                        SelectedEnvironmentSolutions,
                        Not(
                            uniquename in LookUp(
                                SolutionsLatestBuildStatuses,
                                deleteSolutionStatus.status = "completed",
                                uniquename
                            )
                        )
                    )
                );
                ClearCollect(
                    SelectedEnvironmentSolutions,
                    TempSelectedEnvironmentSolutions
                );
                RemoveIf(
                    LastDeletedSolutionsPipelineRuns,
                    buildId in LookUp(
                        SolutionsLatestBuildStatuses,
                        deleteSolutionStatus.status = "completed",
                        Text(deleteSolutionStatus.id)
                    )
                );
                //Load Saved Import Solution Runs
                If(
                    Not IsEmpty(drpAdoOrganizations_1.Selected.AccountName) And Not IsEmpty(drpAdoProjects_1.Selected.name),
                    ForAll(
                        LastSavedImportPipelineRuns As r,
                        Collect(
                            TempSolutionsImportLatestBuildStatuses,
                            {
                                uniquename: r.solutionUniqueName,
                                importSolutionStatus: CustomAzureDevOps.GetBuild(
                                    drpAdoOrganizations_1.Selected.AccountName,
                                    drpAdoProjects_1.Selected.name,
                                    r.buildId
                                )
                            }
                        );
                    )
                );
                ClearCollect(
                    SolutionsImportLatestBuildStatuses,
                    Sort(
                        TempSolutionsImportLatestBuildStatuses,
                        importSolutionStatus.queueTime,
                        Descending
                    )
                );
                Clear(TempSolutionsImportLatestBuildStatuses);
                Select(fncCollectSelectedRepoBranches_1);
            PressedBorderColor: =fncRefreshStatuses_1.Fill
            PressedColor: =fncRefreshStatuses_1.Fill
            PressedFill: =fncRefreshStatuses_1.Color
            Text: ="fncRefreshStatuses"
            Width: =562
            X: =2
            Y: =60
            ZIndex: =6

        fncRefreshBranchFolders_1 As button:
            Height: =50
            HoverBorderColor: =ColorFade(fncRefreshBranchFolders_1.BorderColor, 20%)
            HoverColor: =ColorFade(fncRefreshBranchFolders_1.Color, 20%)
            HoverFill: =ColorFade(fncRefreshBranchFolders_1.Fill, 20%)
            OnSelect: |
                =If(
                    Not IsBlank(drpAdoOrganizations_1.Selected.AccountName) And Not IsBlank(drpAdoProjects_1.Selected.name) And Not IsBlank(dpBranchName_1.Selected.name),
                    ClearCollect(BranchFolders, CustomAzureDevOps.ListItems(
                                    drpAdoOrganizations_1.Selected.AccountName,
                                    drpAdoProjects_1.Selected.name,
                                    drpRepos_1.Selected.id,
                                    {
                                        recursionLevel: "full",
                                        'versionDescriptor.versionType': "branch",
                                        'versionDescriptor.version': dpBranchName_1.Selected.DisplayName
                                    }
                                ).value);
                    ClearCollect(
                        BranchSolutionFolders,
                        AddColumns(
                            Filter(
                                BranchFolders,
                                isFolder = true && "SolutionPackage" in path && Not("SolutionPackage/" in path)
                            ),
                            "DisplayName",
                            Match(
                                path,
                                "\/(?<name>.+)\/SolutionPackage"
                            ).name;
                        )
                    );
                    Set(DefaultBranchSolutionFolder, First(BranchSolutionFolders).DisplayName);
                    ClearCollect(BranchConfigFolders, {DisplayName: Char(160)});
                    Collect(
                        BranchConfigFolders,
                        AddColumns(
                            Filter(
                                BranchFolders,
                                isFolder = true && "config/" in path && Not("/ConfigurationMigrationData" in path)
                            ),
                            "DisplayName",
                            Match(
                                path,
                                "\/config\/(?<environment>.+)"
                            ).environment;
                        )
                    );
                
                );
            PressedBorderColor: =fncRefreshBranchFolders_1.Fill
            PressedColor: =fncRefreshBranchFolders_1.Fill
            PressedFill: =fncRefreshBranchFolders_1.Color
            Text: ="fncRefreshStatuses"
            Width: =562
            X: =2
            Y: =98
            ZIndex: =7

        fncInitializeHome_1 As button:
            HoverBorderColor: =ColorFade(fncInitializeHome_1.BorderColor, 20%)
            HoverColor: =ColorFade(fncInitializeHome_1.Color, 20%)
            HoverFill: =ColorFade(fncInitializeHome_1.Fill, 20%)
            OnSelect: |-
                =UpdateContext({showLoader: true});
                UpdateContext({locStartCheckBuildStatusTimer: false});
                UpdateContext({locIsSaveSettingsEnabled: false});
                //Set Global user, Global CDS user and get App User Settings
                Set(
                    gblUser,
                    User()
                );
                Set(
                    gblCdsUser,
                    LookUp(
                        Users,
                        domainname = gblUser.Email
                    )
                );
                // Get user settings for this App.   
                Set(
                    AppUserSetting,
                    LookUp(
                        'App User Settings',
                        AppName = ApplicationName && Owner = gblCdsUser
                    )
                );
                // If App User Setting record doesn't exist, it is the first time the user has used this app, so create it and force user to save initial values
                If(
                    IsBlank(AppUserSetting),
                    Set(
                        AppUserSetting,
                        Patch(
                            'App User Settings',
                            {cat_appname: ApplicationName}
                        )
                    );
                    UpdateContext(
                        {
                            showDialogOverlay: true,
                            showSettingsDialog: true
                        }
                    );
                    
                );
                //Store User Settings in a collection
                ClearCollect(
                    AppUserSetting_UserSettings,
                    Filter(
                        'User Settings',
                        'App User Setting'.'App User Setting' = AppUserSetting.'App User Setting'
                    )
                );
                //Pull the Orgs, Projects and Project Repos.
                Set(
                    Orgs,
                    CustomAzureDevOps.GetOrganizations()
                );
                Set(
                    DefaultOrg,
                    LookUp(
                        AppUserSetting_UserSettings,
                        Name = DefaultOrgSettingName
                    )
                );
                // Required to force explicit column selection, otherwise the Value field won't be returned in the result
                LookUp(
                    AppUserSetting_UserSettings,
                    Name = DefaultOrgSettingName
                ).Value;
                If(
                    IsBlank(DefaultOrg) && CountRows(Orgs) > 0,
                    Set(
                        DefaultOrg,
                        Patch(
                            'User Settings',
                            {
                                'App User Setting': AppUserSetting,
                                Name: DefaultOrgSettingName,
                                Value: First(Orgs).AccountName
                            }
                        )
                    )
                );
                ClearCollect(
                    SelectedOrgProjects,
                    CustomAzureDevOps.GetProjects(DefaultOrg.Value).value
                );
                Set(
                    DefaultProject,
                    LookUp(
                        AppUserSetting_UserSettings,
                        Name = DefaultProjectSettingName
                    )
                );
                If(
                    IsBlank(DefaultProject) && CountRows(SelectedOrgProjects) > 0,
                    Set(
                        DefaultProject,
                        Patch(
                            'User Settings',
                            {
                                'App User Setting': AppUserSetting,
                                Name: DefaultProjectSettingName,
                                Value: First(SelectedOrgProjects).name
                            }
                        )
                    )
                );
                ClearCollect(
                    SelectedProjectRepos,
                    CustomAzureDevOps.GetGitRepos(
                        drpAdoOrganizations_1.Selected.AccountName,
                        drpAdoProjects_1.Selected.name
                    ).value
                );
                Set(
                    DefaultRepo,
                    LookUp(
                        AppUserSetting_UserSettings,
                        Name = DefaultRepoSettingName
                    )
                );
                Set(
                    RepoOverridden,
                    IsBlank(
                        LookUp(
                            SelectedProjectRepos,
                            name = DefaultRepo.Value
                        )
                    ) And EnablePreviewFeatures
                );
                If(
                    IsBlank(DefaultRepo) && CountRows(SelectedProjectRepos) > 0,
                    Set(
                        DefaultRepo,
                        Patch(
                            'User Settings',
                            {
                                'App User Setting': AppUserSetting,
                                Name: DefaultRepoSettingName,
                                Value: First(SelectedProjectRepos).name
                            }
                        )
                    )
                );
                ClearCollect(
                    AdoServiceEndpoints,
                    Filter(
                        CustomAzureDevOps.GetServiceEndpoints(
                            DefaultOrg.Value,
                            DefaultProject.Value
                        ).value,
                        ".dynamics.com" in name
                    )
                );
                // Set Organization and Project Specific Settings Names
                Set(
                    DeploymentSettingName,
                    "Deployment - " & drpAdoOrganizations_1.Selected.AccountName & " - " & drpAdoProjects_1.Selected.name
                );
                Set(
                    LastSavedBranchesCreatedSettingName,
                    "LastSavedBranchesCreated - " & drpAdoOrganizations_1.Selected.AccountName & " - " & drpAdoProjects_1.Selected.name
                );
                Set(
                    LastSavedPullRequestsSettingName,
                    "LastSavedPullRequests - " & drpAdoOrganizations_1.Selected.AccountName & " - " & drpAdoProjects_1.Selected.name
                );
                Set(
                    LastSavedExportToGitPipelineRunsSettingName,
                    "LastSavedExportToGitPipelineRuns - " & drpAdoOrganizations_1.Selected.AccountName & " - " & drpAdoProjects_1.Selected.name
                );
                Set(
                    LastSavedImportPipelineRunsSettingName,
                    "LastSavedImportPipelineRuns - " & drpAdoOrganizations_1.Selected.AccountName & " - " & drpAdoProjects_1.Selected.name
                );
                Set(
                    DefaultEnvironmentSettingName,
                    "LastSavedEnvironment - " & drpAdoOrganizations_1.Selected.AccountName & " - " & drpAdoProjects_1.Selected.name
                );
                ClearCollect(
                    AllEnvironments,
                    PowerAppsforMakers.GetEnvironments().value
                );
                ClearCollect(
                    Environments,
                    Filter(
                        AllEnvironments,
                        properties.linkedEnvironmentMetadata.instanceUrl in AdoServiceEndpoints.name
                    )
                );
                Set(
                    DefaultEnvironment,
                    LookUp(
                        AppUserSetting_UserSettings,
                        Name = DefaultEnvironmentSettingName
                    )
                );
                If(
                    IsBlank(DefaultEnvironment) && CountRows(Environments) > 0,
                    Set(
                        DefaultEnvironment,
                        Patch(
                            'User Settings',
                            {
                                'App User Setting': AppUserSetting,
                                Name: DefaultEnvironmentSettingName,
                                Value: First(Environments).name
                            }
                        )
                    )
                );
                Set(
                    DefaultEnvironmentToLoad,
                    LookUp(
                        Environments,
                        name = DefaultEnvironment.Value
                    )
                );
                Set(
                    SelectedEnvironment,
                    DefaultEnvironmentToLoad
                );
                ClearCollect(
                    SelectedProjectPipelines,
                    CustomAzureDevOps.GetPipelines(
                        DefaultOrg.Value,
                        DefaultProject.Value
                    ).value
                );
                // Parse the CSV and get it into the LastSavedPullRequests / LastSavedExportToGitPipelineRuns  / LastSavedBranchesCreated collections 
                Collect(
                    TempLastSavedBranchesCreated,
                    Split(
                        LookUp(
                            AppUserSetting_UserSettings,
                            Name = LastSavedBranchesCreatedSettingName
                        ).Value,
                        "|"
                    )
                );
                ClearCollect(
                    LastSavedBranchesCreated,
                    DropColumns(
                        AddColumns(
                            TempLastSavedBranchesCreated,
                            "solutionUniqueName",
                            First(
                                Split(
                                    ThisRecord.Result,
                                    ","
                                )
                            ).Result,
                            "branchName",
                            Last(
                                FirstN(
                                    Split(
                                        ThisRecord.Result,
                                        ","
                                    ),
                                    2
                                )
                            ).Result
                        ),
                        "Result"
                    )
                );
                Clear(TempLastSavedBranchesCreated);
                ClearCollect(
                    TempLastSavedExportToGitPipelineRuns,
                    Split(
                        LookUp(
                            AppUserSetting_UserSettings,
                            Name = LastSavedExportToGitPipelineRunsSettingName
                        ).Value,
                        "|"
                    )
                );
                ClearCollect(
                    LastSavedExportToGitPipelineRuns,
                    DropColumns(
                        AddColumns(
                            TempLastSavedExportToGitPipelineRuns,
                            "solutionUniqueName",
                            First(
                                Split(
                                    ThisRecord.Result,
                                    ","
                                )
                            ).Result,
                            "buildId",
                            If(
                                Not IsBlank(
                                    Last(
                                        FirstN(
                                            Split(
                                                ThisRecord.Result,
                                                ","
                                            ),
                                            2
                                        )
                                    ).Result
                                ),
                                Value(
                                    Last(
                                        FirstN(
                                            Split(
                                                ThisRecord.Result,
                                                ","
                                            ),
                                            2
                                        )
                                    ).Result
                                )
                            )
                        ),
                        "Result"
                    )
                );
                Clear(TempLastSavedExportToGitPipelineRuns);
                ClearCollect(
                    TempLastSavedImportPipelineRuns,
                    Split(
                        LookUp(
                            AppUserSetting_UserSettings,
                            Name = LastSavedImportPipelineRunsSettingName
                        ).Value,
                        "|"
                    )
                );
                ClearCollect(
                    LastSavedImportPipelineRuns,
                    DropColumns(
                        AddColumns(
                            TempLastSavedImportPipelineRuns,
                            "solutionUniqueName",
                            First(
                                Split(
                                    ThisRecord.Result,
                                    ","
                                )
                            ).Result,
                            "buildId",
                            If(
                                Not IsBlank(
                                    Last(
                                        FirstN(
                                            Split(
                                                ThisRecord.Result,
                                                ","
                                            ),
                                            2
                                        )
                                    ).Result
                                ),
                                Value(
                                    Last(
                                        FirstN(
                                            Split(
                                                ThisRecord.Result,
                                                ","
                                            ),
                                            2
                                        )
                                    ).Result
                                )
                            )
                        ),
                        "Result"
                    )
                );
                Clear(TempLastSavedImportPipelineRuns);
                Collect(
                    TempLastSavedPullRequests,
                    Split(
                        LookUp(
                            AppUserSetting_UserSettings,
                            Name = LastSavedPullRequestsSettingName
                        ).Value,
                        "|"
                    )
                );
                ClearCollect(
                    LastSavedPullRequests,
                    DropColumns(
                        AddColumns(
                            TempLastSavedPullRequests,
                            "solutionUniqueName",
                            First(
                                Split(
                                    ThisRecord.Result,
                                    ","
                                )
                            ).Result,
                            "pullRequestId",
                            If(
                                Not IsBlank(
                                    Last(
                                        FirstN(
                                            Split(
                                                ThisRecord.Result,
                                                ","
                                            ),
                                            2
                                        )
                                    ).Result
                                ),
                                Value(
                                    Last(
                                        FirstN(
                                            Split(
                                                ThisRecord.Result,
                                                ","
                                            ),
                                            2
                                        )
                                    ).Result
                                )
                            ),
                            "targetBranchName",
                            Last(
                                FirstN(
                                    Split(
                                        ThisRecord.Result,
                                        ","
                                    ),
                                    3
                                )
                            ).Result
                        ),
                        "Result"
                    )
                );
                Concurrent(
                    RemoveIf(
                        LastSavedImportPipelineRuns,
                        CustomAzureDevOps.GetBuilds(
                            drpAdoOrganizations_1.Selected.AccountName,
                            drpAdoProjects_1.Selected.name,
                            {buildIds: buildId}
                        ).count = 0 Or IsBlank(solutionUniqueName)
                    ),
                    RemoveIf(
                        LastSavedPullRequests,
                        IsError(
                            CustomAzureDevOps.GetPullReqeust(
                                drpAdoOrganizations_1.Selected.AccountName,
                                drpAdoProjects_1.Selected.name,
                                drpRepos_1.Selected.id,
                                pullRequestId
                            )
                        ) Or IsBlank(solutionUniqueName)
                    ),
                    RemoveIf(
                        LastSavedExportToGitPipelineRuns,
                        CustomAzureDevOps.GetBuilds(
                            drpAdoOrganizations_1.Selected.AccountName,
                            drpAdoProjects_1.Selected.name,
                            {buildIds: buildId}
                        ).count = 0 Or IsBlank(solutionUniqueName)
                    ),
                    RemoveIf(
                        LastSavedBranchesCreated,
                        IsBlank(solutionUniqueName)
                    )
                );
                Clear(TempLastSavedPullRequests);
                Select(fncCollectSelectedRepoBranches_1);
                Select(fncLoadSolutions_1);
                Select(fncResetCheckBuildStatuses_1);
                Select(fncRefreshBranchFolders_1);
                Concurrent(
                    Set(
                        gblAzureDevOpsUserId,
                        First(
                            CustomAzureDevOps.GetIdentities(
                                drpAdoOrganizations_1.Selected.AccountName,
                                {
                                    searchFilter: "MailAddress",
                                    filterValue: gblUser.Email
                                }
                            ).value
                        ).id
                    ),
                    UpdateContext({locIsSaveSettingsEnabled: true});
                    ClearCollect(
                        AADGroups,
                        GetAADGroups.Run().value
                    ),
                    ClearCollect(
                        SharepointSites,
                        GetSharepointSites.Run().value
                    )
                );
                Collect(
                    SharepointSites,
                    {webUrl: Char(160)}
                );
                ClearCollect(
                    SharepointSites,
                    Sort(
                        SharepointSites,
                        webUrl
                    )
                );
                Collect(
                    AADGroups,
                    {name: ""}
                );
                ClearCollect(
                    AADGroups,
                    Sort(
                        AADGroups,
                        name
                    )
                );
            PressedBorderColor: =fncInitializeHome_1.Fill
            PressedColor: =fncInitializeHome_1.Fill
            PressedFill: =fncInitializeHome_1.Color
            Text: ="fncInitializeHome"
            Width: =560
            X: =2
            Y: =191
            ZIndex: =8

    tmrMakerCheckBuildAndPullRequestStatuses As timer:
        AutoStart: =true
        BorderColor: =ColorFade(tmrMakerCheckBuildAndPullRequestStatuses.Fill, -20%)
        DisabledBorderColor: =ColorFade(tmrMakerCheckBuildAndPullRequestStatuses.BorderColor, 70%)
        DisabledColor: =ColorFade(tmrMakerCheckBuildAndPullRequestStatuses.Fill, 90%)
        DisabledFill: =ColorFade(tmrMakerCheckBuildAndPullRequestStatuses.Fill, 70%)
        Duration: =15000
        Height: =68
        HoverBorderColor: =ColorFade(tmrMakerCheckBuildAndPullRequestStatuses.BorderColor, 20%)
        HoverColor: =ColorFade(tmrMakerCheckBuildAndPullRequestStatuses.Color, 20%)
        HoverFill: =ColorFade(tmrMakerCheckBuildAndPullRequestStatuses.Fill, 20%)
        OnTimerEnd: =
        OnTimerStart: =Select(fncRefreshStatuses_1)
        PressedBorderColor: =tmrMakerCheckBuildAndPullRequestStatuses.Fill
        PressedColor: =tmrMakerCheckBuildAndPullRequestStatuses.Fill
        PressedFill: =tmrMakerCheckBuildAndPullRequestStatuses.Color
        Repeat: =true
        Start: =locStartCheckBuildStatusTimer
        Visible: =false
        X: =490
        ZIndex: =29

    MakerDeleteSolutionDialog As groupContainer:
        DisplayMode: =DisplayMode.Edit
        Height: =1080
        Visible: =showDeleteSolutionDialog
        Width: =550
        X: =1370
        ZIndex: =30

        rctMakerDeleteSolutionDialog As rectangle:
            BorderColor: =ColorFade(rctMakerDeleteSolutionDialog.Fill, -20%)
            DisabledFill: =rctMakerDeleteSolutionDialog.Fill
            Fill: =RGBA(255, 255, 255, 1)
            Height: =1080
            HoverFill: =ColorFade(rctMakerDeleteSolutionDialog.Fill, 20%)
            OnSelect: =
            PressedFill: =ColorFade(rctMakerDeleteSolutionDialog.Fill, -20%)
            Width: =550
            ZIndex: =1

        lblMakerDeleteSolutionDialogTitle As label:
            Align: =Center
            FontWeight: =Semibold
            Height: =64
            Size: =16
            Text: ="DELETE UNMANAGED SOLUTION"
            Width: =546
            ZIndex: =2

        icoMakerDeleteSolutionDialogClose As icon.Cancel:
            BorderColor: =ColorFade(icoMakerDeleteSolutionDialogClose.Fill, -20%)
            DisabledFill: =ColorFade(icoMakerDeleteSolutionDialogClose.Fill, -80%)
            Height: =55
            HoverBorderColor: =ColorFade(icoMakerDeleteSolutionDialogClose.BorderColor, 20%)
            HoverColor: =ColorFade(icoMakerDeleteSolutionDialogClose.Color, 20%)
            HoverFill: =ColorFade(icoMakerDeleteSolutionDialogClose.Fill, 20%)
            Icon: =Icon.Cancel
            OnSelect: |-
                =UpdateContext({showDialogOverlay:false,showDeleteSolutionDialog:false})
            PaddingBottom: =10
            PaddingLeft: =10
            PaddingRight: =10
            PaddingTop: =10
            PressedBorderColor: =ColorFade(icoMakerDeleteSolutionDialogClose.BorderColor, -20%)
            PressedColor: =ColorFade(icoMakerDeleteSolutionDialogClose.Color, -20%)
            PressedFill: =ColorFade(icoMakerDeleteSolutionDialogClose.Fill, -20%)
            Width: =55
            X: =495
            Y: =4
            ZIndex: =3

        btnMakerDelete As button:
            DisplayMode: |-
                =If(
                    txtMakerSolutionName.Text = deleteSolutionName,
                    DisplayMode.Edit,
                    DisplayMode.Disabled
                )
            Height: =45
            HoverBorderColor: =ColorFade(btnMakerDelete.BorderColor, 20%)
            HoverColor: =ColorFade(btnMakerDelete.Color, 20%)
            HoverFill: =ColorFade(btnMakerDelete.Fill, 20%)
            OnSelect: |
                =UpdateContext(
                    {
                        showDialogOverlay: false,
                        showDeleteSolutionDialog: false
                    }
                );
                
                UpdateContext(
                    {
                        piplineIdToRun: LookUp(
                            CustomAzureDevOps.GetPipelines(
                                drpAdoOrganizations_1.Selected.AccountName,
                                drpAdoProjects_1.Selected.name
                            ).value,
                            name = "delete-unmanaged-solution-and-components"
                        ).id
                    }
                );
                //Updated LookUp and Remove code to RemoveIf
                Collect(
                    LastDeletedSolutionsPipelineRuns,
                    {
                        solutionUniqueName: glrMakerSolutions.Selected.uniquename,
                        buildId: CustomAzureDevOps.RunPipeline(
                            drpAdoOrganizations_1.SelectedText.'data-ADB4D7A662F548B49FAC2B986E348A1BAccountName',
                            drpAdoProjects_1.Selected.name,
                            piplineIdToRun,
                            {
                                definition: {id: piplineIdToRun},
                                variables: {
                                    Project: {value: drpAdoProjects_1.Selected.name},
                                    Repo: {value: drpRepos_1.Selected.name},
                                    SolutionName: {value: glrMakerSolutions.Selected.uniquename},
                                    Email: {value: gblUser.Email},
                                    UserName: {value: gblUser.FullName},
                                    CommitMessage: {value: txtDeployNotes.Text},
                                    Branch: {value: drpAdoBranches_1.Selected.DisplayName},
                                    BranchToCreate: {value: txtBranchToCreate_1.Text},
                                    ServiceConnection: {value: lblAzureDevOpsServiceConnectionValue_1.Text},
                                    TriggerSolutionUpgrade: {value: false},
                                    BuildDefinitionId: {value: ""},
                                    PipelineId: {value: piplineIdToRun},
                                    ImportUnmanaged: { value: "" },
                                    EnvironmentName: { value: "" },
                                    Data: { value: "{test: """"}"}
                                }
                            }
                        ).id
                    }
                );
                
                Select(fncResetCheckBuildStatuses_1);
                Reset(txtMakerSolutionName);
            PressedBorderColor: =btnMakerDelete.Fill
            PressedColor: =btnMakerDelete.Fill
            PressedFill: =btnMakerDelete.Color
            Text: ="DELETE"
            Width: =200
            X: =330
            Y: =1015
            ZIndex: =8

        txtMakerSolutionName As text:
            Default: =""
            Height: =45
            HintText: ="Enter the Name of the Solution"
            HoverBorderColor: =ColorFade(txtMakerSolutionName.BorderColor, 20%)
            HoverColor: =ColorFade(txtMakerSolutionName.Color, 20%)
            HoverFill: =ColorFade(txtMakerSolutionName.Fill, 20%)
            PressedBorderColor: =txtMakerSolutionName.HoverBorderColor
            PressedColor: =txtMakerSolutionName.Color
            PressedFill: =txtMakerSolutionName.Fill
            Width: =500
            X: =26
            Y: =292
            ZIndex: =10

        lblMakerDeleteNotice As label:
            Color: =Red
            FontWeight: =FontWeight.Semibold
            Height: =129
            PaddingLeft: =0
            Text: |-
                ="NOTE: This is a destructive action. Deleting this solution will cause you to lose all changes you've made. If there are dependent solutions in this environment the delete action will fail and possibly leave this solution in a managed state. Make sure you delete dependent solutions first."
            Width: =513
            X: =20
            Y: =110
            ZIndex: =13

        lblMakerSolutionFriendlyName As label:
            Align: =Center
            FontWeight: =FontWeight.Semibold
            Height: =30
            Size: =16
            Text: =glrMakerSolutions.Selected.friendlyname
            Width: =537
            Y: =60
            ZIndex: =14

        lblMakerConfirmNotice As label:
            Color: =RGBA(0, 0, 0, 1)
            FontWeight: =FontWeight.Semibold
            Height: =37
            PaddingLeft: =0
            Text: ="To confirm type the name of the solution and select DELETE"
            Width: =525
            X: =21
            Y: =255
            ZIndex: =15

    grpMakerImportSolution As group:
        Height: =5
        Width: =5
        X: =40
        Y: =40
        ZIndex: =31

        lblImportSolution_1 As label:
            Color: =RGBA(0, 0, 0, 1)
            FocusedBorderThickness: =
            FontWeight: =Normal
            Height: =51
            HoverColor: =Self.BorderColor
            OnSelect: |-
                =UpdateContext({showDialogOverlay:true, showImportDialog:true})
            Size: =14
            Text: ="IMPORT SOLUTION"
            Visible: =false
            Width: =185
            X: =52
            Y: =90
            ZIndex: =2

        icoImportSolution_1 As icon.Add:
            BorderColor: =ColorFade(icoImportSolution_1.Fill, -20%)
            Color: =PrimaryColor2Value
            DisabledFill: =ColorFade(icoImportSolution_1.Fill, -80%)
            FocusedBorderThickness: =
            Height: =47
            HoverBorderColor: =ColorFade(icoImportSolution_1.BorderColor, 20%)
            HoverColor: =ColorFade(icoImportSolution_1.Color, 20%)
            HoverFill: =ColorFade(icoImportSolution_1.Fill, 20%)
            Icon: =Icon.Add
            OnSelect: |-
                =Select(fncRefreshBranchFolders_1);
                UpdateContext({showDialogOverlay:true, showImportDialog:true});
            PaddingBottom: =8
            PaddingLeft: =8
            PaddingRight: =5
            PaddingTop: =8
            PressedBorderColor: =ColorFade(icoImportSolution_1.BorderColor, -20%)
            PressedColor: =ColorFade(icoImportSolution_1.Color, -20%)
            PressedFill: =ColorFade(icoImportSolution_1.Fill, -20%)
            Tooltip: ="Import an Unmanaged Solution from Source Control"
            Visible: =false
            Width: =57
            Y: =94
            ZIndex: =3

        imgImportStatus_1 As image:
            BorderColor: =ColorFade(imgImportStatus_1.Fill, -20%)
            DisplayMode: =DisplayMode.View
            Height: =48
            HoverBorderColor: =ColorFade(imgImportStatus_1.BorderColor, 20%)
            HoverFill: =ColorFade(imgImportStatus_1.Fill, 20%)
            Image: |-
                =Switch(
                    locImportSolutionStatus.status,
                    "completed",
                    LookUp(
                        StageStatesIcons,
                        state = locImportSolutionStatus.result
                    ).image,
                    "inProgress",
                    LookUp(
                        StageStatesIcons,
                        state = locImportSolutionStatus.status
                    ).image,
                    "notStarted",
                    LookUp(
                        StageStatesIcons,
                        state = locImportSolutionStatus.status
                    ).image,
                    ""
                )
            OnSelect: =
            PaddingBottom: =10
            PaddingTop: =10
            PressedBorderColor: =ColorFade(imgImportStatus_1.BorderColor, -20%)
            PressedFill: =ColorFade(imgImportStatus_1.Fill, -20%)
            Visible: =false
            Width: =50
            X: =5
            Y: =93
            ZIndex: =4

        icoImportStatus_1 As icon.Add:
            BorderColor: =ColorFade(icoImportStatus_1.Fill, -20%)
            Color: =RGBA(0, 0, 0, 0)
            DisabledFill: =ColorFade(icoImportStatus_1.Fill, -80%)
            DisplayMode: =Edit
            Height: =48
            HoverBorderColor: =ColorFade(icoImportStatus_1.BorderColor, 20%)
            HoverColor: =ColorFade(icoImportStatus_1.Color, 20%)
            HoverFill: =ColorFade(icoImportStatus_1.Fill, 20%)
            Icon: =Icon.Add
            OnSelect: |
                =If(
                    !IsBlank(locImportSolutionStatus),
                    Launch(locImportSolutionStatus._links.web.href)
                );
            PressedBorderColor: =ColorFade(icoImportStatus_1.BorderColor, -20%)
            PressedColor: =ColorFade(icoImportStatus_1.Color, -20%)
            PressedFill: =ColorFade(icoImportStatus_1.Fill, -20%)
            Visible: =false
            Width: =50
            X: =7
            Y: =93
            ZIndex: =6

        icoImportSolutionLabel_1 As icon.Add:
            BorderColor: =ColorFade(icoImportSolutionLabel_1.Fill, -20%)
            Color: =PrimaryColor2Value
            DisabledFill: =ColorFade(icoImportSolutionLabel_1.Fill, -80%)
            FocusedBorderThickness: =
            Height: =49
            HoverBorderColor: =ColorFade(icoImportSolutionLabel_1.BorderColor, 20%)
            HoverColor: =ColorFade(icoImportSolutionLabel_1.Color, 20%)
            HoverFill: =ColorFade(icoImportSolutionLabel_1.Fill, 20%)
            Icon: =
            OnSelect: |-
                =Select(fncRefreshBranchFolders_1);
                UpdateContext({showDialogOverlay:true, showImportDialog:true});
            PaddingBottom: =8
            PaddingLeft: =8
            PaddingRight: =5
            PaddingTop: =8
            PressedBorderColor: =ColorFade(icoImportSolutionLabel_1.BorderColor, -20%)
            PressedColor: =ColorFade(icoImportSolutionLabel_1.Color, -20%)
            PressedFill: =ColorFade(icoImportSolutionLabel_1.Fill, -20%)
            Tooltip: ="Import an Unmanaged Solution from Source Control"
            Visible: =false
            Width: =180
            X: =57
            Y: =94
            ZIndex: =7

    MakerEnvironmentSettings As group:
        Height: =5
        Width: =5
        X: =40
        Y: =40
        ZIndex: =31

        imgEnvironment_1 As image:
            BorderColor: =ColorFade(imgEnvironment_1.Fill, -20%)
            Height: =43
            HoverBorderColor: =ColorFade(imgEnvironment_1.BorderColor, 20%)
            HoverFill: =ColorFade(imgEnvironment_1.Fill, 20%)
            Image: |-
                ="data:image/svg+xml,"
                & EncodeUrl("<svg width='16px' height='16px' xmlns='http://www.w3.org/2000/svg'><g><path fill='#ffffff' class='image-264' d='M15,10h-1.809C13.702,9.117,14,8.094,14,7c0-3.314-2.686-6-6-6S2,3.686,2,7c0,1.094,0.298,2.117,0.809,3H1l-1,5h16L15,10z     M4.854,10.854l-0.708-0.708C3.859,9.795,3.606,9.417,3.422,8.997h1.752c0.182,1.03,0.498,1.933,0.91,2.618   C5.632,11.427,5.228,11.16,4.854,10.854z M6.187,8.997h3.626C9.448,10.873,8.619,12,8,12S6.552,10.873,6.187,8.997z M6,7  c0-0.351,0.019-0.682,0.048-1.003h3.904C9.981,6.318,10,6.649,10,7c0,0.349-0.019,0.679-0.048,0.997H6.048C6.019,7.679,6,7.349,6,7z     M8,2c0.619,0,1.447,1.124,1.812,2.997H6.188C6.553,3.124,7.381,2,8,2z M13,7c0,0.341-0.035,0.675-0.101,0.997h-1.944   C10.982,7.672,11,7.341,11,7c0-0.342-0.018-0.676-0.045-1.003h1.944C12.965,6.321,13,6.657,13,7z M10.826,8.997h1.752   c-0.184,0.42-0.437,0.798-0.723,1.148l-0.708,0.708c-0.373,0.305-0.778,0.573-1.229,0.761C10.328,10.93,10.644,10.027,10.826,8.997z   M12.575,4.997h-1.75c-0.182-1.028-0.498-1.929-0.909-2.612C11.104,2.88,12.058,3.821,12.575,4.997z M6.084,2.385    C5.673,3.068,5.357,3.97,5.175,4.997h-1.75C3.942,3.821,4.896,2.88,6.084,2.385z M3.101,5.997h1.944C5.018,6.324,5,6.658,5,7    c0,0.341,0.018,0.672,0.045,0.997H3.101C3.035,7.675,3,7.341,3,7C3,6.657,3.035,6.321,3.101,5.997z M1.22,14l0.6-3h1.717    C4.635,12.225,6.225,13,8,13s3.365-0.775,4.463-2h1.717l0.6,3H1.22z'></path></g></svg>")
                
                //LookUp(ThemeStyles, Name = "PrimaryColor4Value").Value
            OnSelect: |-
                =UpdateContext(
                    {
                        showDialogOverlay: true,
                        showEnvironmentDialog: true
                    }
                )
            PressedBorderColor: =ColorFade(imgEnvironment_1.BorderColor, -20%)
            PressedFill: =ColorFade(imgEnvironment_1.Fill, -20%)
            Width: =50
            X: =1614
            Y: =16
            ZIndex: =17

        lblEnvironment_1 As label:
            Color: =RGBA(255, 255, 255, 1)
            Height: =29
            OnSelect: |-
                =UpdateContext(
                    {
                        showDialogOverlay: true,
                        showEnvironmentDialog: true
                    }
                )
            Size: =10
            Text: ="Select Your Maker Environment"
            Width: =241
            X: =1664
            Y: =8
            ZIndex: =18

        lblEnvironmentName_1 As label:
            Color: =RGBA(255, 255, 255, 1)
            Height: =29
            OnSelect: |-
                =UpdateContext(
                    {
                        showDialogOverlay: true,
                        showEnvironmentDialog: true
                    }
                )
            Size: =12
            Text: =glrlEnvironments_1.Selected.properties.linkedEnvironmentMetadata.friendlyName
            Width: =241
            X: =1664
            Y: =30
            ZIndex: =20

    grpMakerRefreshSolutions As group:
        Height: =5
        Width: =5
        X: =40
        Y: =40
        ZIndex: =31

        icoMakerRefreshSolutions As icon.Add:
            BorderColor: =ColorFade(icoMakerRefreshSolutions.Fill, -20%)
            Color: =PrimaryColor2Value
            DisabledColor: =ColorFade(icoMakerRefreshSolutions.Color, 50%)
            DisabledFill: =ColorFade(icoMakerRefreshSolutions.Fill, -80%)
            Height: =47
            HoverBorderColor: =ColorFade(icoMakerRefreshSolutions.BorderColor, 20%)
            HoverColor: =ColorFade(icoMakerRefreshSolutions.Color, 20%)
            HoverFill: =ColorFade(icoMakerRefreshSolutions.Fill, 20%)
            Icon: =Icon.Reload
            OnSelect: =Select(fncReloadSolutions_1);
            PaddingBottom: =8
            PaddingLeft: =8
            PaddingRight: =5
            PaddingTop: =8
            PressedBorderColor: =ColorFade(icoMakerRefreshSolutions.BorderColor, -20%)
            PressedColor: =ColorFade(icoMakerRefreshSolutions.Color, -20%)
            PressedFill: =ColorFade(icoMakerRefreshSolutions.Fill, -20%)
            Tooltip: ="Click to Refresh Solutions and Statuses"
            Width: =65
            X: =20
            Y: =90
            ZIndex: =10

        lblMakerRefreshSolution As label:
            Color: =RGBA(0, 0, 0, 1)
            FontWeight: =Normal
            Height: =51
            HoverColor: =Self.BorderColor
            OnSelect: =Select(fncReloadSolutions_1);
            Size: =14
            Text: ="REFRESH"
            Tooltip: ="Refresh Solution(s) and Statuses"
            Width: =185
            X: =78
            Y: =86
            ZIndex: =14

        icoMakerRefreshSolutionsLabel As icon.Add:
            BorderColor: =ColorFade(icoMakerRefreshSolutionsLabel.Fill, -20%)
            Color: =PrimaryColor2Value
            DisabledColor: =ColorFade(icoMakerRefreshSolutionsLabel.Color, 50%)
            DisabledFill: =ColorFade(icoMakerRefreshSolutionsLabel.Fill, -80%)
            Height: =53
            HoverBorderColor: =ColorFade(icoMakerRefreshSolutionsLabel.BorderColor, 20%)
            HoverColor: =ColorFade(icoMakerRefreshSolutionsLabel.Color, 20%)
            HoverFill: =ColorFade(icoMakerRefreshSolutionsLabel.Fill, 20%)
            Icon: =
            OnSelect: =Select(fncReloadSolutions_1);
            PaddingBottom: =8
            PaddingLeft: =8
            PaddingRight: =5
            PaddingTop: =8
            PressedBorderColor: =ColorFade(icoMakerRefreshSolutionsLabel.BorderColor, -20%)
            PressedColor: =ColorFade(icoMakerRefreshSolutionsLabel.Color, -20%)
            PressedFill: =ColorFade(icoMakerRefreshSolutionsLabel.Fill, -20%)
            Tooltip: ="Refresh Solution(s) and Statuses"
            Width: =163
            X: =20
            Y: =86
            ZIndex: =31

